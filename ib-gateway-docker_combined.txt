==== ./ib-gateway-docker/tws-docker-compose.yml ====

version: "3.4"

name: algo-trader
services:
  tws:
    restart: unless-stopped
    devices:
      - /dev/dri:/dev/dri #recomended
    shm_size: "1gb" #recomended
    security_opt:
      - seccomp:unconfined #recomended
    build:
      context: ./latest
      dockerfile: Dockerfile.tws
      tags:
        - "ghcr.io/gnzsnz/tws-rdesktop:latest"
    image: ghcr.io/gnzsnz/tws-rdesktop:latest
    environment:
      PUID: 1000
      PGID: 1000
      PASSWD: ${PASSWD:-}
      TWS_USERID: ${TWS_USERID}
      TWS_PASSWORD: ${TWS_PASSWORD}
      TRADING_MODE: ${TRADING_MODE:-paper}
      TWS_USERID_PAPER: ${TWS_USERID_PAPER:-}
      TWS_PASSWORD_PAPER: ${TWS_PASSWORD_PAPER:-}
      TWS_SETTINGS_PATH: ${TWS_SETTINGS_PATH:-}
      READ_ONLY_API: ${READ_ONLY_API:-}
      TWOFA_TIMEOUT_ACTION: ${TWOFA_TIMEOUT_ACTION:-exit}
      BYPASS_WARNING: ${BYPASS_WARNING:-}
      AUTO_RESTART_TIME: ${AUTO_RESTART_TIME:-}
      AUTO_LOGOFF_TIME: ${AUTO_LOGOFF_TIME:-}
      SAVE_TWS_SETTINGS: ${SAVE_TWS_SETTINGS:-}
      RELOGIN_AFTER_TWOFA_TIMEOUT: ${RELOGIN_AFTER_TWOFA_TIMEOUT:-no}
      TWOFA_EXIT_INTERVAL: ${TWOFA_EXIT_INTERVAL:-60}
      TIME_ZONE: ${TIME_ZONE:-Etc/UTC}
      TZ: ${TIME_ZONE:-Etc/UTC}
      CUSTOM_CONFIG: ${CUSTOM_CONFIG:-NO}
      JAVA_HEAP_SIZE: ${JAVA_HEAP_SIZE:-}
      SSH_TUNNEL: ${SSH_TUNNEL:-}
      SSH_OPTIONS: ${SSH_OPTIONS:-}
      SSH_ALIVE_INTERVAL: ${SSH_ALIVE_INTERVAL:-}
      SSH_ALIVE_COUNT: ${SSH_ALIVE_COUNT:-}
      SSH_PASSPHRASE: ${SSH_PASSPHRASE:-}
      SSH_REMOTE_PORT: ${SSH_REMOTE_PORT:-}
      SSH_USER_TUNNEL: ${SSH_USER_TUNNEL:-}
      SSH_RESTART: ${SSH_RESTART:-}
      SSH_RDP_PORT: ${SSH_RDP_PORT:-}
    volumes:
      - ./config:/config # optional
      - tws_tmp:/tmp # recommended for performance
    # custom certificate and key
    #- ${PWD}/keylock:/keylock # required to avoid key generation by container
    #- ${PWD/key.pem:/etc/xrdp/key.pem # key
    #- ${PWD}/cert.pem:/etc/xrdp/cert.pem # cert
    ports:
      - "127.0.0.1:7496:7498" # live
      - "127.0.0.1:7497:7499" # paper
      - "127.0.0.1:3370:3389" # xrdp

volumes:
  tws_tmp:


==== ./ib-gateway-docker/stable/Dockerfile ====

##############################################################################
# Setup Stage: install apps
#
# This is a dedicated stage so that donwload archives don't end up on
# production image and consume unnecessary space.
##############################################################################

FROM ubuntu:22.04 as setup

ENV IB_GATEWAY_VERSION=10.19.2h
ENV IB_GATEWAY_RELEASE_CHANNEL=stable
ENV IBC_VERSION=3.18.0

WORKDIR /tmp/setup

# Prepare system
RUN apt-get update -y && \
  DEBIAN_FRONTEND=noninteractive apt-get install --no-install-recommends --yes \
  curl \
  ca-certificates \
  unzip && \
  apt-get clean && \
  rm -rf /var/lib/apt/lists/* && \
# Install IB Gateway
# Use this instead of "RUN curl .." to install a local file:
#COPY ibgateway-${IB_GATEWAY_VERSION}-standalone-linux-x64.sh .
  curl -sSOL https://github.com/gnzsnz/ib-gateway-docker/releases/download/ibgateway-${IB_GATEWAY_RELEASE_CHANNEL}%40${IB_GATEWAY_VERSION}/ibgateway-${IB_GATEWAY_VERSION}-standalone-linux-x64.sh && \
  curl -sSOL https://github.com/gnzsnz/ib-gateway-docker/releases/download/ibgateway-${IB_GATEWAY_RELEASE_CHANNEL}%40${IB_GATEWAY_VERSION}/ibgateway-${IB_GATEWAY_VERSION}-standalone-linux-x64.sh.sha256 && \
  sha256sum --check ./ibgateway-${IB_GATEWAY_VERSION}-standalone-linux-x64.sh.sha256 && \
  chmod a+x ./ibgateway-${IB_GATEWAY_VERSION}-standalone-linux-x64.sh && \
  ./ibgateway-${IB_GATEWAY_VERSION}-standalone-linux-x64.sh -q -dir /root/Jts/ibgateway/${IB_GATEWAY_VERSION} &&\
  # Install IBC
  curl -sSOL https://github.com/IbcAlpha/IBC/releases/download/${IBC_VERSION}-Update.1/IBCLinux-${IBC_VERSION}.zip && \
  mkdir /root/ibc && \
  unzip ./IBCLinux-${IBC_VERSION}.zip -d /root/ibc && \
  chmod -R u+x /root/ibc/*.sh && \
  chmod -R u+x /root/ibc/scripts/*.sh

COPY ./config/ibgateway/jts.ini.tmpl /root/Jts/jts.ini.tmpl
COPY ./config/ibc/config.ini.tmpl /root/ibc/config.ini.tmpl

# Copy scripts
COPY ./scripts /root/scripts

##############################################################################
# Build Stage: build production image
##############################################################################

FROM ubuntu:22.04

ENV IB_GATEWAY_VERSION=10.19.2h
# IB Gateway user constants
ARG USER_ID="${USER_ID:-1000}"
ARG USER_GID="${USER_GID:-1000}"
# IBC env vars
ENV HOME=/home/ibgateway
ENV TWS_MAJOR_VRSN=${IB_GATEWAY_VERSION}
ENV TWS_PATH=${HOME}/Jts
ENV TWS_INI=jts.ini
ENV IBC_PATH=${HOME}/ibc
ENV IBC_INI=${HOME}/ibc/config.ini
ENV SCRIPT_PATH=${HOME}/scripts
ENV GATEWAY_OR_TWS=gateway
# Copy files
COPY --from=setup /usr/local/i4j_jres/ /usr/local/i4j_jres
COPY --chown=${USER_ID}:${USER_GID} --from=setup /root/ ${HOME}

# Prepare system
RUN apt-get update -y && \
  DEBIAN_FRONTEND=noninteractive apt-get install --no-install-recommends --yes \
  gettext-base socat xvfb x11vnc sshpass openssh-client && \
  apt-get clean && \
  rm -rf /var/lib/apt/lists/* && \
  groupadd --gid ${USER_GID} ibgateway && \
  useradd -ms /bin/bash --uid ${USER_ID} --gid ${USER_GID} ibgateway && \
  chmod a+x ${SCRIPT_PATH}/*.sh

USER ${USER_ID}:${USER_GID}
WORKDIR ${HOME}

# Start run script
CMD ["/home/ibgateway/scripts/run.sh"]

LABEL org.opencontainers.image.source=https://github.com/gnzsnz/ib-gateway-docker
LABEL org.opencontainers.image.url=https://github.com/gnzsnz/ib-gateway-docker/pkgs/container/ib-gateway
LABEL org.opencontainers.image.description="Docker image with IB Gateway and IBC "
LABEL org.opencontainers.image.licenses="Apache License Version 2.0"
LABEL org.opencontainers.image.version=${IB_GATEWAY_VERSION}-${IB_GATEWAY_RELEASE_CHANNEL}


==== ./ib-gateway-docker/stable/Dockerfile.tws ====

##############################################################################
# Setup Stage: install apps
#
# This is a dedicated stage used as source for needed files.
#
##############################################################################
ARG IB_VERSION=10.19.2h
FROM ghcr.io/gnzsnz/ib-gateway:${IB_VERSION} as setup

WORKDIR /

##############################################################################
# Build Stage: build production image
##############################################################################

FROM lscr.io/linuxserver/rdesktop:ubuntu-xfce

ENV IB_GATEWAY_VERSION=10.19.2h
ENV IB_GATEWAY_RELEASE_CHANNEL=stable
ENV IBC_VERSION=3.18.0

# IB Gateway user constants
# IBC env vars
ENV TWS_MAJOR_VRSN=${IB_GATEWAY_VERSION}
ENV TWS_PATH=/opt/ibkr
ENV TWS_INI=jts.ini
ENV IBC_PATH=/opt/ibc
ENV IBC_INI=${IBC_PATH}/config.ini
ENV SCRIPT_PATH=/defaults
ENV GATEWAY_OR_TWS=tws

ARG DEBIAN_FRONTEND=noninteractive

RUN \
  apt-get update -y && \
  apt-get install --no-install-recommends --yes socat sshpass gettext-base \
    libnspr4 libnss3 libcrypto++8 xdg-utils xfce4-cpugraph-plugin \
    xfce4-netload-plugin xfce4-taskmanager xfce4-xkb-plugin xfce4-notes \
    gvfs gvfs-backends gvfs-fuse && \
  apt-get clean && \
  rm -rf /var/lib/apt/lists/* # end

# Copy files
COPY --from=setup /usr/local/i4j_jres/ /usr/local/i4j_jres
COPY --chown=abc:abc --from=setup /home/ibgateway/Jts ${TWS_PATH}
COPY --chown=abc:abc --from=setup /home/ibgateway/ibc ${IBC_PATH}
COPY ./tws-scripts/start_session.sh /custom-services.d/start_session.sh
COPY ./tws-scripts/run_tws.sh ${SCRIPT_PATH}
COPY ./scripts/* ${SCRIPT_PATH}

# labels
LABEL org.opencontainers.image.source=https://github.com/gnzsnz/ib-gateway-docker
LABEL org.opencontainers.image.url=https://github.com/gnzsnz/ib-gateway-docker/pkgs/container/tws-rdesktop
LABEL org.opencontainers.image.description="Docker image with XFCE, TWS & IBC"
LABEL org.opencontainers.image.licenses="Apache License Version 2.0"
LABEL org.opencontainers.image.version=${IB_GATEWAY_VERSION}-${IB_GATEWAY_RELEASE_CHANNEL}


==== ./ib-gateway-docker/stable/tws-scripts/run_tws.sh ====

#!/bin/bash
# shellcheck shell=bash
# shellcheck disable=SC1091,SC2317

echo "*************************************************************************"
echo ".> Starting IBC/TWS"
echo "*************************************************************************"
# source common functions
source "${SCRIPT_PATH}/common.sh"

disable_agents() {
	## disable ssh and gpg agent
	# https://docs.xfce.org/xfce/xfce4-session/advanced
	if [ ! -f /config/.config/disable_agents ]; then
		echo ".> Disabling ssh-agent and gpg-agent"
		# disable xfce
		xfconf-query -c xfce4-session -p /startup/ssh-agent/enabled -n -t bool -s false
		xfconf-query -c xfce4-session -p /startup/gpg-agent/enabled -n -t bool -s false
		# kill ssh-agent and gpg-agent
		pkill -x ssh-agent
		pkill -x gpg-agent
		touch /config/.config/disable_agents
	else
		echo ".> Found '/config/.config/disable_agents' agents already disabled"
	fi
}

# set display
export DISPLAY=:10

# user id
echo ".> Running as user"
id

# disable agents
disable_agents
# SSH
setup_ssh
# set ports
set_ports
# apply settings
apply_settings

# Java heap size
set_java_heap

# forward ports, socat or ssh
"${SCRIPT_PATH}/port_forwarding.sh" &

# start IBC
echo ".> Starting IBC with params:"
echo ".>		Version: ${TWS_MAJOR_VRSN}"
echo ".>		program: ${IBC_COMMAND:-tws}"
echo ".>		tws-path: ${TWS_PATH}"
echo ".>		ibc-path: ${IBC_PATH}"
echo ".>		ibc-init: ${IBC_INI}"
echo ".>		tws-settings-path: ${TWS_SETTINGS_PATH:-$TWS_PATH}"
echo ".>		on2fatimeout: ${TWOFA_TIMEOUT_ACTION}"

"${IBC_PATH}"/scripts/ibcstart.sh "${TWS_MAJOR_VRSN}" \
	"--tws-path=${TWS_PATH}" \
	"--ibc-path=${IBC_PATH}" "--ibc-ini=${IBC_INI}" \
	"--on2fatimeout=${TWOFA_TIMEOUT_ACTION}" \
	"--tws-settings-path=${TWS_SETTINGS_PATH:-$TWS_PATH}" &

pid="$!"
echo "$pid" >/tmp/pid
echo ".> IBC's pid: ${pid}"

wait "${pid}"
exit $?


==== ./ib-gateway-docker/stable/tws-scripts/start_session.sh ====

#!/usr/bin/with-contenv bash
# shellcheck shell=bash

echo "*************************************************************************"
echo ".> Launching IBC/TWS service"
echo "*************************************************************************"
# shellcheck disable=SC1091
# source common functions
source "${SCRIPT_PATH}/common.sh"

# set display
export DISPLAY=:10

# set user pass
_PASS=${PASSWD:-abc}
echo ".> Setting user password"
echo "abc:$_PASS" | chpasswd
id

if [ -n "${TZ}" ]; then
	echo ".> Setting timezone to: ${TZ}"
	echo "${TZ}" >/etc/timezone
fi

# open xfce session
echo ".> Openning Xrdp session"
echo "${_PASS}" | xrdp-sesrun -s 127.0.0.1 -F 0 abc

# setting permissions
echo ".> Setting permissions for ${TWS_PATH} and ${IBC_PATH}"
chown abc:abc -R "${TWS_PATH}" "${IBC_PATH}"

sudo -EH -u abc "${SCRIPT_PATH}/run_tws.sh"


==== ./ib-gateway-docker/stable/scripts/run.sh ====

#!/bin/bash
# shellcheck disable=SC2317
# Don't warn about unreachable commands in this file

echo "*************************************************************************"
echo ".> Starting IBC/IB gateway"
echo "*************************************************************************"

# shellcheck disable=SC1091
source "${SCRIPT_PATH}/common.sh"

stop_ibc() {
	echo ".> 😘 Received SIGINT or SIGTERM. Shutting down IB Gateway."

	#
	if [ -n "$VNC_SERVER_PASSWORD" ]; then
		echo ".> Stopping x11vnc."
		pkill x11vnc
	fi
	#
	echo ".> Stopping Xvfb."
	pkill Xvfb
	#
	if [ -n "$SSH_TUNNEL" ]; then
		echo ".> Stopping ssh."
		pkill ssh
	else
		echo ".> Stopping socat."
		pkill socat
	fi
	# Get PID
	local pid
	pid=$(</tmp/pid)
	# Set TERM
	echo ".> Stopping IBC."
	kill -SIGTERM "${pid}"
	# Wait for exit
	wait "${pid}"
	# All done.
	echo ".> Done... $?"
}

start_xvfb() {
	# start Xvfb
	echo ".> Starting Xvfb server"
	DISPLAY=:1
	export DISPLAY
	rm -f /tmp/.X1-lock
	Xvfb $DISPLAY -ac -screen 0 1024x768x16 &
}

start_vnc() {
	# start VNC server
	if [ -n "$VNC_SERVER_PASSWORD" ]; then
		echo ".> Starting VNC server"
		"${SCRIPT_PATH}/run_x11_vnc.sh" &
	else
		echo ".> VNC server disabled"
	fi
}

# start Xvfb
start_xvfb

# setup SSH Tunnel
setup_ssh

# start VNC server
start_vnc

# apply settings
apply_settings

# set API and socat ports
set_ports

# Java heap size
set_java_heap

# forward ports, socat or ssh
"${SCRIPT_PATH}/port_forwarding.sh" &

echo ".> Starting IBC with params:"
echo ".>		Version: ${TWS_MAJOR_VRSN}"
echo ".>		program: ${IBC_COMMAND:-gateway}"
echo ".>		tws-path: ${TWS_PATH}"
echo ".>		ibc-path: ${IBC_PATH}"
echo ".>		ibc-init: ${IBC_INI}"
echo ".>		tws-settings-path: ${TWS_SETTINGS_PATH:-$TWS_PATH}"
echo ".>		on2fatimeout: ${TWOFA_TIMEOUT_ACTION}"
# start IBC -g for gateway
"${IBC_PATH}/scripts/ibcstart.sh" "${TWS_MAJOR_VRSN}" -g \
	"--tws-path=${TWS_PATH}" \
	"--ibc-path=${IBC_PATH}" "--ibc-ini=${IBC_INI}" \
	"--on2fatimeout=${TWOFA_TIMEOUT_ACTION}" \
	"--tws-settings-path=${TWS_SETTINGS_PATH:-}" &

pid="$!"
echo "$pid" >/tmp/pid
trap stop_ibc SIGINT SIGTERM
wait "${pid}"
exit $?


==== ./ib-gateway-docker/stable/scripts/port_forwarding.sh ====

#!/bin/bash

# validate API port
if [ -z "${API_PORT}" ]; then
	echo ".> API_PORT not set, port: ${API_PORT}"
	exit 1
fi

if [ "$SSH_TUNNEL" = "yes" ]; then

	if [ -n "$(pgrep -x ssh)" ]; then
		# if this script is already running don't start it
		echo ".> SSH tunnel already active. Not starting a new one"
		exit 0
	fi

	if [ -z "$SSH_REMOTE_PORT" ]; then
		# by default remote port is same than API_PORT
		SSH_REMOTE_PORT="$API_PORT"
	fi
	echo ".> SSH_REMOTE_PORT set to :${SSH_REMOTE_PORT}"

	# set vnc ssh tunnel
	if [ "$GATEWAY_OR_TWS" = "gateway" ] && [ -n "$SSH_VNC_PORT" ] && [ -n "$VNC_SERVER_PASSWORD" ]; then
		# set ssh tunnel for vnc
		SSH_SCREEN="-R 127.0.0.1:5900:localhost:$SSH_VNC_PORT"
		echo ".> SSH_VNC_TUNNEL set to :${SSH_SCREEN}"
	fi

	# set rdp ssh tunnel
	if [ "$GATEWAY_OR_TWS" = "tws" ] && [ -n "$SSH_RDP_PORT" ]; then
		# set ssh tunnel for rdp
		SSH_SCREEN="-R 127.0.0.1:3389:localhost:$SSH_RDP_PORT"
		echo ".> SSH_RDP_TUNNEL set to :${SSH_SCREEN}"
	fi

	while true; do
		echo ".> Starting ssh tunnel with ssh sock: $SSH_AUTH_SOCK"
		bash -c "ssh ${SSH_ALL_OPTIONS} -TNR 127.0.0.1:${API_PORT}:localhost:${SSH_REMOTE_PORT} ${SSH_SCREEN:-} ${SSH_USER_TUNNEL}"
		sleep "${SSH_RESTART:-5}"
	done
else
	if [ -z "${SOCAT_PORT}" ]; then
		echo ".> SOCAT_PORT not set, port: ${SOCAT_PORT}"
		exit 1
	fi
	if [ -n "$(pgrep -x socat)" ]; then
		# if this script is already running don't start it
		echo ".> socat already active. Not starting a new one"
		exit 0
	fi
	# no ssh tunnel, start socat
	echo ".> Waiting for socat to start"
	sleep 30

	#
	printf "Forking :::%d onto 0.0.0.0:%d > trading mode %s \n" \
		"${API_PORT}" "${SOCAT_PORT}" "${TRADING_MODE}"
	socat TCP-LISTEN:"${SOCAT_PORT}",fork TCP:127.0.0.1:"${API_PORT}"
fi


==== ./ib-gateway-docker/stable/scripts/common.sh ====

#!/bin/bash
# shellcheck disable=SC1091

setup_ssh() {
	# setup SSH Tunnel
	if [ "$SSH_TUNNEL" = "yes" ]; then
		echo ".> Setting SSH tunnel"

		_SSH_OPTIONS="-o ServerAliveInterval=${SSH_ALIVE_INTERVAL:-20}"
		_SSH_OPTIONS+=" -o ServerAliveCountMax=${SSH_ALIVE_COUNT:-3}"

		if [ -n "$SSH_OPTIONS" ]; then
			_SSH_OPTIONS+=" $SSH_OPTIONS"
		fi
		SSH_ALL_OPTIONS="$_SSH_OPTIONS"
		export SSH_ALL_OPTIONS
		echo ".> SSH options: $SSH_ALL_OPTIONS"

		if [ -n "$SSH_PASSPHRASE" ]; then
			if ! pgrep ssh-agent >/dev/null; then
				# start agent if it's not already running
				# https://wiki.archlinux.org/title/SSH_keys#SSH_agents
				echo ".> Starting ssh-agent."
				ssh-agent >"${HOME}/.ssh-agent.env"
				source "${HOME}/.ssh-agent.env"
				echo ".> ssh-agent sock: ${SSH_AUTH_SOCK}"
			else
				echo ".> ssh-agent already running"
				if [ -z "${SSH_AUTH_SOCK}" ]; then
					echo ".> Loading agent environment"
					source "${HOME}/.ssh-agent.env"
				fi
				echo ".> ssh-agent sock: ${SSH_AUTH_SOCK}"
			fi

			echo ".> Adding keys to ssh-agent."
			export SSH_ASKPASS_REQUIRE=never
			SSHPASS="${SSH_PASSPHRASE}" sshpass -e -P "passphrase" ssh-add
			echo ".> ssh-agent identities: $(ssh-add -l)"
		fi
	else
		echo ".> SSH tunnel disabled"
	fi
}

apply_settings() {
	# apply env variables into IBC and gateway/TWS config files
	if [ "$CUSTOM_CONFIG" != "yes" ]; then
		echo ".> Appling settings to IBC's config.ini"
		# replace env variables
		envsubst <"${IBC_INI}.tmpl" >"${IBC_INI}"

		# where are settings stored
		if [ -n "$TWS_SETTINGS_PATH" ]; then
			echo ".> Settings directory set to: $TWS_SETTINGS_PATH"
			_JTS_PATH=$TWS_SETTINGS_PATH
			if [ ! -d "$TWS_SETTINGS_PATH" ]; then
				# if TWS_SETTINGS_PATH does not exists, create it
				echo ".> Creating directory: $TWS_SETTINGS_PATH"
				mkdir "$TWS_SETTINGS_PATH"
			fi
		else
			echo ".> Settings directory NOT set, defaulting to: $TWS_PATH"
			_JTS_PATH=$TWS_PATH
		fi
		# only if jts.ini does not exists
		if [ ! -f "$_JTS_PATH/$TWS_INI" ]; then
			echo ".> Setting timezone in ${_JTS_PATH}/${TWS_INI}"
			envsubst <"${TWS_PATH}/${TWS_INI}.tmpl" >"${_JTS_PATH}/${TWS_INI}"
		else
			echo ".> File jts.ini already exists, not setting timezone"
		fi
	else
		echo ".> Using CUSTOM_CONFIG, (value:${CUSTOM_CONFIG})"
	fi
}

set_ports() {
	# set ports for API and SOCAT

	# ibgateway ports
	if [ "${GATEWAY_OR_TWS}" = "gateway" ]; then
		if [ "$TRADING_MODE" = "paper" ]; then
			# paper ibgateway ports
			API_PORT=4002
			SOCAT_PORT=4004
			export API_PORT SOCAT_PORT
		elif [ "$TRADING_MODE" = "live" ]; then
			# live ibgateway ports
			API_PORT=4001
			SOCAT_PORT=4003
			export API_PORT SOCAT_PORT
		else
			# invalid option
			echo ".> Invalid TRADING_MODE: $TRADING_MODE"
			exit 1
		fi
	elif [ "${GATEWAY_OR_TWS}" = "tws" ]; then
		if [ "$TRADING_MODE" = "paper" ]; then
			# paper TWS ports
			API_PORT=7497
			SOCAT_PORT=7499
			export API_PORT SOCAT_PORT
		elif [ "$TRADING_MODE" = "live" ]; then
			# live TWS ports
			API_PORT=7496
			SOCAT_PORT=7498
			export API_PORT SOCAT_PORT
		else
			# invalid option
			echo ".> Invalid TRADING_MODE: $TRADING_MODE"
			exit 1
		fi
	fi
	echo ".> API_PORT set to: ${API_PORT}"
	echo ".> SOCAT_PORT set to: ${SOCAT_PORT}"

}

set_java_heap() {
	if [ -n "${JAVA_HEAP_SIZE}" ]; then
		_vmpath="${TWS_PATH}/ibgateway/${IB_GATEWAY_VERSION}"
		_string="s/-Xmx768m/-Xmx${JAVA_HEAP_SIZE}m/g"
		sed -i "${_string}" "${_vmpath}/ibgateway.vmoptions"
		echo ".> Java heap size set to ${JAVA_HEAP_SIZE}m"
	else
		echo ".> Usign default Java heap size 768m."
	fi
}


==== ./ib-gateway-docker/stable/scripts/run_x11_vnc.sh ====

#!/bin/bash

x11vnc -ncache_cr -display :1 -forever -shared -bg -noipv6 -passwd "$VNC_SERVER_PASSWORD"


==== ./ib-gateway-docker/stable/config/ibc/config.ini.tmpl ====

# Note that in the comments in this file, TWS refers to both the Trader
# Workstation and the IB Gateway, unless explicitly stated otherwise.
#
# When referred to below, the default value for a setting is the value
# assumed if either the setting is included but no value is specified, or
# the setting is not included at all.
#
# IBC may also be used to start the FIX CTCI Gateway. All settings
# relating to this have names prefixed with FIX.
#
# The IB API Gateway and the FIX CTCI Gateway share the same code. Which
# gateway actually runs is governed by an option on the initial gateway
# login screen. The FIX setting described under IBC Startup
# Settings below controls this.



# =============================================================================
# 1.   IBC Startup Settings
# =============================================================================


# IBC may be used to start the IB Gateway for the FIX CTCI. This
# setting must be set to 'yes' if you want to run the FIX CTCI gateway. The
# default is 'no'.

FIX=no



# =============================================================================
# 2.   Authentication Settings
# =============================================================================

# TWS and the IB API gateway require a single username and password.
# You may specify the username and password using the following settings:
#
#	IbLoginId
#	IbPassword
#
# Alternatively, you can specify the username and password in the command
# files used to start TWS or the Gateway, but this is not recommended for
# security reasons.
#
# If you don't specify them, you will be prompted for them in the usual
# login dialog when TWS starts (but whatever you have specified will be
# included in the dialog automatically: for example you may specify the
# username but not the password, and then you will be prompted for the
# password via the login dialog). Note that if you specify either
# the username or the password (or both) in the command file, then
# IbLoginId and IbPassword settings defined in this file are ignored.
#
#
# The FIX CTCI gateway requires one username and password for FIX order
# routing, and optionally a separate username and password for market
# data connections. You may specify the usernames and passwords using
# the following settings:
#
#	FIXLoginId
#	FIXPassword
#	IbLoginId	(optional - for market data connections)
#	IbPassword	(optional - for market data connections)
#
# Alternatively you can specify the FIX username and password in the
# command file used to start the FIX CTCI Gateway, but this is not
# recommended for security reasons.
#
# If you don't specify them, you will be prompted for them in the usual
# login dialog when FIX CTCI gateway starts (but whatever you have
# specified will be included in the dialog automatically: for example
# you may specify the usernames but not the passwords, and then you will
# be prompted for the passwords via the login dialog). Note that if you
# specify either the FIX username or the FIX password (or both) on the
# command line, then FIXLoginId and FIXPassword settings defined in this
# file are ignored; he same applies to the market data username and
# password.

# IB API Authentication Settings
# ------------------------------

# Your TWS username:

IbLoginId=${TWS_USERID}


# Your TWS password:

IbPassword=${TWS_PASSWORD}


# FIX CTCI Authentication Settings
# --------------------------------

# Your FIX CTCI username:

FIXLoginId=


# Your FIX CTCI password:

FIXPassword=


# Second Factor Authentication Settings
# -------------------------------------

# If you have enabled more than one second factor authentication
# device, TWS presents a list from which you must select the device
# you want to use for this login. You can use this setting to
# instruct IBC to select a particular item in the list on your
# behalf. Note that you must spell this value exactly as it appears
# in the list. If no value is set, you must manually select the
# relevant list entry.

SecondFactorDevice=


# If you use the IBKR Mobile app for second factor authentication,
# and you fail to complete the process before the time limit imposed
# by IBKR, this setting tells IBC whether to automatically restart
# the login sequence, giving you another opportunity to complete
# second factor authentication.
#
# Permitted values are 'yes' and 'no'.
#
# If this setting is not present or has no value, then the value
# of the deprecated ExitAfterSecondFactorAuthenticationTimeout is
# used instead. If this also has no value, then this setting defaults
# to 'no'.
#
# NB: you must be using IBC v3.14.0 or later to use this setting:
# earlier versions ignore it.

ReloginAfterSecondFactorAuthenticationTimeout=${RELOGIN_AFTER_TWOFA_TIMEOUT}


# This setting is only relevant if
# ReloginAfterSecondFactorAuthenticationTimeout is set to 'yes',
# or if ExitAfterSecondFactorAuthenticationTimeout is set to 'yes'.
#
# It controls how long (in seconds) IBC waits for login to complete
# after the user acknowledges the second factor authentication
# alert at the IBKR Mobile app. If login has not completed after
# this time, IBC terminates.
# The default value is 60.

SecondFactorAuthenticationExitInterval=${TWOFA_EXIT_INTERVAL}


# This setting specifies the timeout for second factor authentication
# imposed by IB. The value is in seconds. You should not change this
# setting unless you have reason to believe that IB has changed the
# timeout. The default value is 180.

SecondFactorAuthenticationTimeout=180


# DEPRECATED SETTING
# ------------------
#
# ExitAfterSecondFactorAuthenticationTimeout - THIS SETTING WILL BE
# REMOVED IN A FUTURE RELEASE. For IBC version 3.14.0 and later, see
# the notes for ReloginAfterSecondFactorAuthenticationTimeout above.
#
# For IBC versions earlier than 3.14.0: If you use the IBKR Mobile
# app for second factor authentication, and you fail to complete the
# process before the time limit imposed by IBKR, you can use this
# setting to tell IBC to exit: arrangements can then be made to
# automatically restart IBC in order to initiate the login sequence
# afresh. Otherwise, manual intervention at TWS's
# Second Factor Authentication dialog is needed to complete the
# login.
#
# Permitted values are 'yes' and 'no'. The default is 'no'.
#
# Note that the scripts provided with the IBC zips for Windows and
# Linux provide options to automatically restart in these
# circumstances, but only if this setting is also set to 'yes'.

ExitAfterSecondFactorAuthenticationTimeout=no


# Trading Mode
# ------------
#
# This indicates whether the live account or the paper trading
# account corresponding to the supplied credentials is to be used.
# The allowed values are 'live' (the default) and 'paper'.
#
# If this is set to 'live', then the credentials for the live
# account must be supplied. If it is set to 'paper', then either
# the live or the paper-trading credentials may be supplied.

TradingMode=${TRADING_MODE}


# Paper-trading Account Warning
# -----------------------------
#
# Logging in to a paper-trading account results in TWS displaying
# a dialog asking the user to confirm that they are aware that this
# is not a brokerage account. Until this dialog has been accepted,
# TWS will not allow API connections to succeed. Setting this
# to 'yes' (the default) will cause IBC to automatically
# confirm acceptance. Setting it to 'no' will leave the dialog
# on display, and the user will have to deal with it manually.

AcceptNonBrokerageAccountWarning=yes


# Login Dialog Display Timeout
#-----------------------------
#
# In some circumstances, starting TWS may result in failure to display
# the login dialog. Restarting TWS may help to resolve this situation,
# and IBC does this automatically.
#
# This setting controls how long (in seconds) IBC waits for the login
# dialog to appear before restarting TWS.
#
# Note that in normal circumstances with a reasonably specified
# computer the time to displaying the login dialog is typically less
# than 20 seconds, and frequently much less. However many factors can
# influence this, and it is unwise to set this value too low.
#
# The default value is 60.

LoginDialogDisplayTimeout=60



# =============================================================================
# 3.   TWS Startup Settings
# =============================================================================

# Path to settings store
# ----------------------
#
# Path to the directory where TWS should store its settings. This is
# normally the folder in which TWS is installed. However you may set
# it to some other location if you wish (for example if you want to
# run multiple instances of TWS with different settings).
#
# It is recommended for clarity that you use an absolute path. The
# effect of using a relative path is undefined.
#
# Linux and macOS users should use the appropriate path syntax.
#
# Note that, for Windows users, you MUST use double separator
# characters to separate the elements of the folder path: for
# example, IbDir=C:\\IBLiveSettings is valid, but
# IbDir=C:\IBLiveSettings is NOT valid and will give unexpected
# results. Linux and macOS users need not use double separators,
# but they are acceptable.
#
# The default is the current working directory when IBC is
# started, unless the TWS_SETTINGS_PATH setting in the relevant
# start script is set.
#
# If both this setting and TWS_SETTINGS_PATH are set, then this
# setting takes priority. Note that if they have different values,
# auto-restart will not work.
#
# NB: this setting is now DEPRECATED. You should use the
# TWS_SETTINGS_PATH setting in the relevant start script.

#IbDir=/home/ibgateway/Jts


# Store settings on server
# ------------------------
#
# If you wish to store a copy of your TWS settings on IB's
# servers as well as locally on your computer, set this to
# 'yes': this enables you to run TWS on different computers
# with the same configuration, market data lines, etc. If set
# to 'no', running TWS on different computers will not share the
# same settings. If no value is specified, TWS will obtain its
# settings from the same place as the last time this user logged
# in (whether manually or using IBC).

StoreSettingsOnServer=


# Minimize TWS on startup
# -----------------------
#
# Set to 'yes' to minimize TWS when it starts:

MinimizeMainWindow=no


# Existing Session Detected Action
# --------------------------------
#
# When a user logs on to an IBKR account for trading purposes by any means, the
# IBKR account server checks to see whether the account is already logged in
# elsewhere. If so, a dialog is displayed to both the users that enables them
# to determine what happens next. The 'ExistingSessionDetectedAction' setting
# instructs TWS how to proceed when it displays this dialog:
#
#   * If the new TWS session is set to 'secondary', the existing session continues
#     and the new session terminates. Thus a secondary TWS session can never
#     override any other session.
#
#   * If the existing TWS session is set to 'primary', the existing session
#     continues and the new session terminates (even if the new session is also
#     set to primary). Thus a primary TWS session can never be overridden by
#     any new session).
#
#   * If both the existing and the new TWS sessions are set to 'primaryoverride',
#     the existing session terminates and the new session proceeds.
#
#   * If the existing TWS session is set to 'manual', the user must handle the
#     dialog.
#
# The difference between 'primary' and 'primaryoverride' is that a
# 'primaryoverride' session can be overriden over by a new 'primary' session,
# but a 'primary' session cannot be overriden by any other session.
#
# When set to 'primary', if another TWS session is started and manually told to
# end the 'primary' session, the 'primary' session is automatically reconnected.
#
# The default is 'manual'.

ExistingSessionDetectedAction=primary


# Override TWS API Port Number
# ----------------------------
#
# If OverrideTwsApiPort is set to an integer, IBC changes the
# 'Socket port' in TWS's API configuration to that number shortly
# after startup (but note that for the FIX Gateway, this setting is
# actually stored in jts.ini rather than the Gateway's settings
# file). Leaving the setting blank will make no change to
# the current setting. This setting is only intended for use in
# certain specialized situations where the port number needs to
# be set dynamically at run-time, and for the FIX Gateway: most
# non-FIX users will never need it, so don't use it unless you know
# you need it.

OverrideTwsApiPort=


# Override TWS Master Client ID
# -----------------------------
#
# If OverrideTwsMasterClientID is set to an integer, IBC changes the
# 'Master Client ID' value in TWS's API configuration to that
# value shortly after startup. Leaving the setting blank will make
# no change to the current setting. This setting is only intended
# for use in certain specialized situations where the value needs to
# be set dynamically at run-time: most users will never need it,
# so don't use it unless you know you need it.

OverrideTwsMasterClientID=


# Read-only Login
# ---------------
#
# If ReadOnlyLogin is set to 'yes', and the user is enrolled in IB's
# account security programme, the user will not be asked to perform
# the second factor authentication action, and login to TWS will
# occur automatically in read-only mode: in this mode, placing or
# managing orders is not allowed.
#
# If set to 'no', and the user is enrolled in IB's account security
# programme, the second factor authentication process is handled
# according to the Second Factor Authentication Settings described
# elsewhere in this file.
#
# If the user is not enrolled in IB's account security programme,
# this setting is ignored. The default is 'no'.

ReadOnlyLogin=no


# Read-only API
# -------------
#
# If ReadOnlyApi is set to 'yes', API programs cannot submit, modify
# or cancel orders. If set to 'no', API programs can do these things.
# If not set, the existing TWS/Gateway configuration is unchanged.
# NB: this setting is really only supplied for the benefit of new TWS
# or Gateway instances that are being automatically installed and
# started without user intervention (eg Docker containers). Where
# a user is involved, they should use the Global Configuration to
# set the relevant checkbox (this only needs to be done once) and
# not provide a value for this setting.

ReadOnlyApi=${READ_ONLY_API}


# API Precautions
# ---------------
#
# These settings relate to the corresponding 'Precautions' checkboxes in the
# API section of the Global Configuration dialog.
#
# For all of these, the accepted values are:
# - 'yes' sets the checkbox
# - 'no' clears the checkbox
# - if not set, the existing TWS/Gateway configuration is unchanged
#
# NB: thess settings are really only supplied for the benefit of new TWS
# or Gateway instances that are being automatically installed and
# started without user intervention, or where user settings are not preserved
# between sessions (eg some Docker containers). Where a user is involved, they
# should use the Global Configuration to set the relevant checkboxes and not
# provide values for these settings.

BypassOrderPrecautions=${BYPASS_WARNING}

BypassBondWarning=${BYPASS_WARNING}

BypassNegativeYieldToWorstConfirmation=${BYPASS_WARNING}

BypassCalledBondWarning=${BYPASS_WARNING}

BypassSameActionPairTradeWarning=${BYPASS_WARNING}

BypassPriceBasedVolatilityRiskWarning=${BYPASS_WARNING}

BypassUSStocksMarketDataInSharesWarning=${BYPASS_WARNING}

BypassRedirectOrderWarning=${BYPASS_WARNING}

BypassNoOverfillProtectionPrecaution=${BYPASS_WARNING}


# Market data size for US stocks - lots or shares
# -----------------------------------------------
#
# Since IB introduced the option of market data for US stocks showing
# bid, ask and last sizes in shares rather than lots, TWS and Gateway
# display a dialog immediately after login notifying the user about
# this and requiring user input before allowing market data to be
# accessed. The user can request that the dialog not be shown again.
#
# It is recommended that the user should handle this dialog manually
# rather than using these settings, which are provided for situations
# where the user interface is not easily accessible, or where user
# settings are not preserved between sessions (eg some Docker images).
#
# - If this setting is set to 'accept', the dialog will be handled
#   automatically and the option to not show it again will be
#   selected.
#
#   Note that in this case, the only way to allow the dialog to be
#   displayed again is to manually enable the 'Bid, Ask and Last
#   Size Display Update' message in the 'Messages' section of the TWS
#   configuration dialog. So you should only use 'Accept' if you are
#   sure you really don't want the dialog to be displayed again, or
#   you have easy access to the user interface.
#
# - If set to 'defer', the dialog will be handled automatically (so
#   that market data will start), but the option to not show it again
#   will not be selected, and it will be shown again after the next
#   login.
#
# - If set to 'ignore', the user has to deal with the dialog manually.
#
# The default value is 'ignore'.
#
# Note if set to 'accept' or 'defer', TWS also automatically sets
# the API settings checkbox labelled 'Send market data in lots for
# US stocks for dual-mode API clients'. IBC cannot prevent this.
# However you can change this immmediately by setting
# SendMarketDataInLotsForUSstocks (see below) to 'no' .

AcceptBidAskLastSizeDisplayUpdateNotification=accept


# This setting determines whether the API settings checkbox labelled
# 'Send market data in lots for US stocks for dual-mode API clients'
# is set or cleared. If set to 'yes', the checkbox is set. If set to
# 'no' the checkbox is cleared. If defaulted, the checkbox is
# unchanged.

SendMarketDataInLotsForUSstocks=


# Trusted API Client IPs
# ----------------------
#
# NB: THIS SETTING IS ONLY RELEVANT FOR THE GATEWAY, AND ONLY WHEN FIX=yes.
# In all other cases it is ignored.
#
# This is a list of IP addresses separated by commas. API clients with IP
# addresses in this list are able to connect to the API without Gateway
# generating the 'Incoming connection' popup.
#
# Note that 127.0.0.1 is always permitted to connect, so do not include it
# in this setting.

TrustedTwsApiClientIPs=


# Reset Order ID Sequence
# -----------------------
#
# The setting resets the order id sequence for orders submitted via the API, so
# that the next invocation of the `NextValidId` API callback will return the
# value 1. The reset occurs when TWS starts.
#
# Note that order ids are reset for all API clients, except those that have
# outstanding (ie incomplete) orders: their order id sequence carries on as
# before.
#
# Valid values are 'yes', 'true', 'false' and 'no'. The default is 'no'.

ResetOrderIdsAtStart=


# This setting specifies IBC's action when TWS displays the dialog asking for
# confirmation of a request to reset the API order id sequence.
#
# Note that the Gateway never displays this dialog, so this setting is ignored
# for a Gateway session.
#
# Valid values consist of two strings separated by a solidus '/'. The first
# value specifies the action to take when the order id reset request resulted
# from setting ResetOrderIdsAtStart=yes. The second specifies the action to
# take when the order id reset request is a result of the user clicking the
# 'Reset API order ID sequence' button in the API configuration. Each value
# must be one of the following:
#
#    'confirm'
#        order ids will be reset
#
#    'reject'
#        order ids will not be reset
#
#    'ignore'
#        IBC will ignore the dialog. The user must take action.
#
#    The default setting is ignore/ignore

# Examples:
#
#    'confirm/reject' - confirm order id reset only if ResetOrderIdsAtStart=yes
#                       and reject any user-initiated requests
#
#    'ignore/confirm' - user must decide what to do if ResetOrderIdsAtStart=yes
#                       and confirm user-initiated requests
#
#    'reject/ignore'  - reject order id reset if  ResetOrderIdsAtStart=yes but
#                       allow user to handle user-initiated requests

ConfirmOrderIdReset=



# =============================================================================
# 4.   TWS Auto-Logoff and Auto-Restart
# =============================================================================
#
# TWS and Gateway insist on being restarted every day. Two alternative
# automatic options are offered:
#
#    - Auto-Logoff: at a specified time, TWS shuts down tidily, without
#      restarting.
#
#    - Auto-Restart: at a specified time, TWS shuts down and then restarts
#      without the user having to re-autheticate.
#
# The normal way to configure the time at which this happens is via the Lock
# and Exit section of the Configuration dialog. Once this time has been
# configured in this way, the setting persists until the user changes it again.
#
# However, there are situations where there is no user available to do this
# configuration, or where there is no persistent storage (for example some
# Docker images). In such cases, the auto-restart or auto-logoff time can be
# set whenever IBC starts with the settings below.
#
# The value, if specified, must be a time in HH:MM AM/PM format, for example
# 08:00 AM or 10:00 PM. Note that there must be a single space between the
# two parts of this value; also that midnight is "12:00 AM" and midday is
# "12:00 PM".
#
# If no value is specified for either setting, the currently configured
# settings will apply. If a value is supplied for one setting, the other
# setting is cleared. If values are supplied for both settings, only the
# auto-restart time is set, and the auto-logoff time is cleared.
#
# Note that for a normal TWS/Gateway installation with persistent storage
# (for example on a desktop computer) the value will be persisted as if the
# user had set it via the configuration dialog.
#
# If you choose to auto-restart, you should take note of the considerations
# described at the link below. Note that where this information mentions
# 'manual authentication', restarting IBC will do the job (IBKR does not
# recognise the existence of IBC in its docuemntation).
#
#  https://www.interactivebrokers.com/en/software/tws/twsguide.htm#usersguidebook/configuretws/auto_restart_info.htm
#
# If you use the "RESTART" command via the IBC command server, and IBC is
# running any version of the Gateway (or a version of TWS earlier than 1018),
# note that this will set the Auto-Restart time in Gateway/TWS's configuration
# dialog to the time at which the restart actually happens (which may be up to
# a minute after the RESTART command is issued). To prevent future auto-
# restarts at this time, you must make sure you have set AutoLogoffTime or
# AutoRestartTime to your desired value before running IBC. NB: this does not
# apply to TWS from version 1018 onwards.

AutoLogoffTime=${AUTO_LOGOFF_TIME}

AutoRestartTime=${AUTO_RESTART_TIME}


# =============================================================================
# 5.   TWS Tidy Closedown Time
# =============================================================================
#
# Specifies a time at which TWS will close down tidily, with no restart.
#
# There is little reason to use this setting. It is similar to AutoLogoffTime,
# but can include a day-of-the-week, whereas AutoLogoffTime and AutoRestartTime
# apply every day. So for example you could use ClosedownAt in conjunction with
# AutoRestartTime to shut down TWS on Friday evenings after the markets
# close, without it running on Saturday as well.
#
# To tell IBC to tidily close TWS at a specified time every
# day, set this value to <hh:mm>, for example:
# ClosedownAt=22:00
#
# To tell IBC to tidily close TWS at a specified day and time
# each week, set this value to <dayOfWeek hh:mm>, for example:
# ClosedownAt=Friday 22:00
#
# Note that the day of the week must be specified using your
# default locale. Also note that Java will only accept
# characters encoded to ISO 8859-1 (Latin-1). This means that
# if the day name in your default locale uses any non-Latin-1
# characters you need to encode them using Unicode escapes
# (see http://java.sun.com/docs/books/jls/third_edition/html/lexical.html#3.3
# for details). For example, to tidily close TWS at 12:00 on
# Saturday where the default locale is Simplified Chinese,
# use the following:
# #ClosedownAt=\u661F\u671F\u516D 12:00

ClosedownAt=



# =============================================================================
# 6.   Other TWS Settings
# =============================================================================

# Accept Incoming Connection
# --------------------------
#
# If set to 'accept', IBC automatically accepts incoming
# API connection dialogs. If set to 'reject', IBC
# automatically rejects incoming API connection dialogs. If
# set to 'manual', the user must decide whether to accept or reject
# incoming API connection dialogs. The default is 'manual'.
# NB: it is recommended to set this to 'reject', and to explicitly
# configure which IP addresses can connect to the API in TWS's API
# configuration page, as this is much more secure (in this case, no
# incoming API connection dialogs will occur for those IP addresses).

AcceptIncomingConnectionAction=reject


# Allow Blind Trading
# -------------------
#
# If you attempt to place an order for a contract for which
# you have no market data subscription, TWS displays a dialog
# to warn you against such blind trading.
#
#   yes   means the dialog is dismissed as though the user had
# 	  clicked the 'Ok' button: this means that you accept
# 	  the risk and want the order to be submitted.
#
#   no    means the dialog remains on display and must be
#         handled by the user.

AllowBlindTrading=no


# Save Settings on a Schedule
# ---------------------------
#
# You can tell TWS to automatically save its settings on a schedule
# of your choosing. You can specify one or more specific times,
# like this:
#
# SaveTwsSettingsAt=HH:MM [ HH:MM]...
#
# for example:
# SaveTwsSettingsAt=08:00   12:30 17:30
#
# Or you can specify an interval at which settings are to be saved,
# optionally starting at a specific time and continuing until another
# time, like this:
#
#SaveTwsSettingsAt=Every n [{mins | hours}] [hh:mm] [hh:mm]
#
# where the first hh:mm is the start time and the second is the end
# time. If you don't specify the end time, settings are saved regularly
# from the start time till midnight. If you don't specify the start time.
# settings are saved regularly all day, beginning at 00:00. Note that
# settings will always be saved at the end time, even if that is not
# exactly one interval later than the previous time. If neither 'mins'
# nor 'hours' is specified, 'mins' is assumed. Examples:
#
# To save every 30 minutes all day starting at 00:00
#SaveTwsSettingsAt=Every 30
#SaveTwsSettingsAt=Every 30 mins
#
# To save every hour starting at 08:00 and ending at midnight
#SaveTwsSettingsAt=Every 1 hours 08:00
#SaveTwsSettingsAt=Every 1 hours 08:00 00:00
#
# To save every 90 minutes starting at 08:00 up to and including 17:43
#SaveTwsSettingsAt=Every 90 08:00 17:43

SaveTwsSettingsAt=${SAVE_TWS_SETTINGS}


# Confirm Crypto Currency Orders Automatically
# --------------------------------------------
#
# When you place an order for a cryptocurrency contract, a dialog is displayed
# asking you to confirm that you want to place the order, and notifying you
# that you are placing an order to trade cryptocurrency with Paxos, a New York
# limited trust company, and not at Interactive Brokers.
#
#   transmit    means that the order will be placed automatically, and the
#               dialog will then be closed
#
#   cancel      means that the order will not be placed, and the dialog will
#               then be closed
#
#   manual      means that IBC will take no action and the user must deal
#               with the dialog

ConfirmCryptoCurrencyOrders=transmit



# =============================================================================
# 7.   Settings Specific to Indian Versions of TWS
# =============================================================================

# Indian versions of TWS may display a password expiry
# notification dialog and a NSE Compliance dialog. These can be
# dismissed by setting the following to yes. By default the
# password expiry notice is not dismissed, but the NSE Compliance
# notice is dismissed.

# Warning: setting DismissPasswordExpiryWarning=yes will mean
# you will not be notified when your password is about to expire.
# You must then take other measures to ensure that your password
# is changed within the expiry period, otherwise IBC will
# not be able to login successfully.

DismissPasswordExpiryWarning=no
DismissNSEComplianceNotice=yes



# =============================================================================
# 8.   IBC Command Server Settings
# =============================================================================

# Do NOT CHANGE THE FOLLOWING SETTINGS unless you
# intend to issue commands to IBC (for example
# using telnet). Note that these settings have nothing to
# do with running programs that use the TWS API.

# Command Server Port Number
# --------------------------
#
# The port number that IBC listens on for commands
# such as "STOP". DO NOT set this to the port number
# used for TWS API connections.
#
# The convention is to use 7462 for this port,
# but it must be set to a different value from any other
# IBC instance that might run at the same time.
#
# The default value is 0, which tells IBC not to start
# the command server

#CommandServerPort=7462
CommandServerPort=0


# Permitted Command Sources
# -------------------------
#
# A comma separated list of IP addresses, or host names,
# which are allowed addresses for sending commands to
# IBC.  Commands can always be sent from the
# same host as IBC is running on.

ControlFrom=


# Address for Receiving Commands
# ------------------------------
#
# Specifies the IP address on which the Command Server
# is to listen. For a multi-homed host, this can be used
# to specify that connection requests are only to be
# accepted on the specified address. The default is to
# accept connection requests on all local addresses.

BindAddress=


# Command Prompt
# --------------
#
# The specified string is output by the server when
# the connection is first opened and after the completion
# of each command. This can be useful if sending commands
# using an interactive program such as telnet. The default
# is that no prompt is output.
# For example:
#
# CommandPrompt=>

CommandPrompt=


# Suppress Command Server Info Messages
# -------------------------------------
#
# Some commands can return intermediate information about
# their progress. This setting controls whether such
# information is sent. The default is that such information
# is not sent.

SuppressInfoMessages=yes



# =============================================================================
# 9.   Diagnostic Settings
# =============================================================================
#
# IBC can log information about the structure of windows
# displayed by TWS. This information is useful when adding
# new features to IBC or when behaviour is not as expected.
#
# The logged information shows the hierarchical organisation
# of all the components of the window, and includes the
# current values of text boxes and labels.
#
# Note that this structure logging has a small performance
# impact, and depending on the settings can cause the logfile
# size to be significantly increased. It is therefore
# recommended that the LogStructureWhen setting be set to
# 'never' (the default) unless there is a specific reason
# that this information is needed.


# Scope of Structure Logging
# --------------------------
#
# The LogStructureScope setting indicates which windows are
# eligible for structure logging:
#
#    - (default value) if set to 'known', only windows that
#      IBC recognizes are eligible - these are windows that
#      IBC has some interest in monitoring, usually to take
#      some action on the user's behalf;
#
#    - if set to 'unknown', only windows that IBC does not
#      recognize are eligible. Most windows displayed by
#      TWS fall into this category;
#
#    - if set to 'untitled', only windows that IBC does not
#      recognize and that have no title are eligible. These
#      are usually message boxes or similar small windows,
#
#    - if set to 'all', then every window displayed by TWS
#      is eligible.
#

LogStructureScope=known


# When to Log Window Structure
# ----------------------------
#
# The LogStructureWhen setting specifies the circumstances
# when eligible TWS windows have their structure logged:
#
#     - if set to 'open' or 'yes' or 'true', IBC logs the
#       structure of an eligible window the first time it
#       is encountered;
#
#     - if set to 'openclose', the structure is logged every
#       time an eligible window is opened or closed;
#
#    - if set to 'activate', the structure is logged every
#      time an eligible window is made active;
#
#    - (default value) if set to 'never' or 'no' or 'false',
#      structure information is never logged.
#

LogStructureWhen=never


# DEPRECATED SETTING
# ------------------
#
# LogComponents - THIS SETTING WILL BE REMOVED IN A FUTURE
# RELEASE
#
# If LogComponents is set to any value, this is equivalent
# to setting LogStructureWhen to that same value and
# LogStructureScope to 'all': the actual values of those
# settings are ignored. The default is that the values
# of LogStructureScope and LogStructureWhen are honoured.

#LogComponents=


==== ./ib-gateway-docker/stable/config/ibgateway/jts.ini.tmpl ====

[IBGateway]
WriteDebug=false
TrustedIPs=127.0.0.1
ApiOnly=true

[Logon]
Locale=en
TimeZone=${TIME_ZONE}
displayedproxymsg=1
UseSSL=true
s3store=true

[Communication]


==== ./ib-gateway-docker/latest/Dockerfile ====

##############################################################################
# Setup Stage: install apps
#
# This is a dedicated stage so that donwload archives don't end up on
# production image and consume unnecessary space.
##############################################################################

FROM ubuntu:22.04 as setup

ENV IB_GATEWAY_VERSION=10.27.1c
ENV IB_GATEWAY_RELEASE_CHANNEL=latest
ENV IBC_VERSION=3.18.0

WORKDIR /tmp/setup

# Prepare system
RUN apt-get update -y && \
  DEBIAN_FRONTEND=noninteractive apt-get install --no-install-recommends --yes \
  curl \
  ca-certificates \
  unzip && \
  apt-get clean && \
  rm -rf /var/lib/apt/lists/* && \
  if [ "$(uname -m)" = "aarch64" ]; then \
    export URL="https://download.bell-sw.com/java/11.0.22+12/bellsoft-jre11.0.22+12-linux-aarch64-full.tar.gz" ; \
    export ARCHIVE_NAME="bellsoft-jre11.0.22+12-linux-aarch64-full.tar.gz" ; \
    export JVM_DIR="jre-11.0.22-full" ; \
    curl -sSOL $URL ; \
    tar -xvzf $ARCHIVE_NAME; \
    mv $JVM_DIR /opt/java ; \
    export JAVA_HOME=/opt/java ; \
    export PATH=$JAVA_HOME/bin:$PATH ; \
    fi && \
# Install IB Gateway
# Use this instead of "RUN curl .." to install a local file:
#COPY ibgateway-${IB_GATEWAY_VERSION}-standalone-linux-x64.sh .
  curl -sSOL https://github.com/gnzsnz/ib-gateway-docker/releases/download/ibgateway-${IB_GATEWAY_RELEASE_CHANNEL}%40${IB_GATEWAY_VERSION}/ibgateway-${IB_GATEWAY_VERSION}-standalone-linux-x64.sh && \
  curl -sSOL https://github.com/gnzsnz/ib-gateway-docker/releases/download/ibgateway-${IB_GATEWAY_RELEASE_CHANNEL}%40${IB_GATEWAY_VERSION}/ibgateway-${IB_GATEWAY_VERSION}-standalone-linux-x64.sh.sha256 && \
  sha256sum --check ./ibgateway-${IB_GATEWAY_VERSION}-standalone-linux-x64.sh.sha256 && \
  chmod a+x ./ibgateway-${IB_GATEWAY_VERSION}-standalone-linux-x64.sh && \
  if [ "$(uname -m)" = "aarch64" ]; then \
    sed -i 's/-Djava.ext.dirs="$app_java_home\/lib\/ext:$app_java_home\/jre\/lib\/ext"/--add-modules=ALL-MODULE-PATH/g' "ibgateway-${IB_GATEWAY_VERSION}-standalone-linux-x64.sh" ; \
    app_java_home=/opt/java ./ibgateway-${IB_GATEWAY_VERSION}-standalone-linux-x64.sh -q -dir /root/Jts/ibgateway/${IB_GATEWAY_VERSION} ; \
  else \
    ./ibgateway-${IB_GATEWAY_VERSION}-standalone-linux-x64.sh -q -dir /root/Jts/ibgateway/${IB_GATEWAY_VERSION} ; \
  fi && \
  # Install IBC
  curl -sSOL https://github.com/IbcAlpha/IBC/releases/download/${IBC_VERSION}-Update.1/IBCLinux-${IBC_VERSION}.zip && \
  mkdir /root/ibc && \
  unzip ./IBCLinux-${IBC_VERSION}.zip -d /root/ibc && \
  chmod -R u+x /root/ibc/*.sh && \
  chmod -R u+x /root/ibc/scripts/*.sh

COPY ./config/ibgateway/jts.ini.tmpl /root/Jts/jts.ini.tmpl
COPY ./config/ibc/config.ini.tmpl /root/ibc/config.ini.tmpl

# Copy scripts
COPY ./scripts /root/scripts

##############################################################################
# Build Stage: build production image
##############################################################################

FROM ubuntu:22.04

ENV IB_GATEWAY_VERSION=10.27.1c
# IB Gateway user constants
ARG USER_ID="${USER_ID:-1000}"
ARG USER_GID="${USER_GID:-1000}"
# IBC env vars
ENV HOME=/home/ibgateway
ENV TWS_MAJOR_VRSN=${IB_GATEWAY_VERSION}
ENV TWS_PATH=${HOME}/Jts
ENV TWS_INI=jts.ini
ENV TWS_INI_TMPL=${TWS_INI}.tmpl
ENV IBC_PATH=${HOME}/ibc
ENV IBC_INI=${HOME}/ibc/config.ini
ENV IBC_INI_TMPL=${IBC_INI}.tmpl
ENV SCRIPT_PATH=${HOME}/scripts
ENV GATEWAY_OR_TWS=gateway
# Copy files
COPY --from=setup /usr/local /usr/local
COPY --chown=${USER_ID}:${USER_GID} --from=setup /root/ ${HOME}
# if aarch64 java is there get it
COPY --from=setup /opt /opt


# Prepare system
RUN apt-get update -y && \
  apt-get upgrade -y && \
  DEBIAN_FRONTEND=noninteractive apt-get install --no-install-recommends --yes \
  gettext-base socat xvfb x11vnc sshpass openssh-client && \
  apt-get clean && \
  rm -rf /var/lib/apt/lists/* && \
  groupadd --gid ${USER_GID} ibgateway && \
  useradd -ms /bin/bash --uid ${USER_ID} --gid ${USER_GID} ibgateway && \
  chmod a+x ${SCRIPT_PATH}/*.sh

USER ${USER_ID}:${USER_GID}
WORKDIR ${HOME}

# Start run script
CMD ["/home/ibgateway/scripts/run.sh"]

LABEL org.opencontainers.image.source=https://github.com/gnzsnz/ib-gateway-docker
LABEL org.opencontainers.image.url=https://github.com/gnzsnz/ib-gateway-docker/pkgs/container/ib-gateway
LABEL org.opencontainers.image.description="Docker image with IB Gateway and IBC "
LABEL org.opencontainers.image.licenses="Apache License Version 2.0"
LABEL org.opencontainers.image.version=${IB_GATEWAY_VERSION}-${IB_GATEWAY_RELEASE_CHANNEL}


==== ./ib-gateway-docker/latest/Dockerfile.tws ====

##############################################################################
# Setup Stage: install apps
#
# This is a dedicated stage used as source for needed files.
#
##############################################################################
ARG IB_VERSION=10.27.1c
FROM ghcr.io/gnzsnz/ib-gateway:${IB_VERSION} as setup

WORKDIR /

##############################################################################
# Build Stage: build production image
##############################################################################

FROM lscr.io/linuxserver/rdesktop:ubuntu-xfce

ENV IB_GATEWAY_VERSION=10.27.1c
ENV IB_GATEWAY_RELEASE_CHANNEL=latest
ENV IBC_VERSION=3.18.0

# IB Gateway user constants
# IBC env vars
ENV TWS_MAJOR_VRSN=${IB_GATEWAY_VERSION}
ENV TWS_PATH=/opt/ibkr
ENV TWS_INI=jts.ini
ENV TWS_INI_TMPL=${TWS_INI}.tmpl
ENV IBC_PATH=/opt/ibc
ENV IBC_INI=${IBC_PATH}/config.ini
ENV IBC_INI_TMPL=${IBC_INI}.tmpl
ENV SCRIPT_PATH=/defaults
ENV GATEWAY_OR_TWS=tws
ENV NO_AT_BRIDGE=1

ARG DEBIAN_FRONTEND=noninteractive

RUN \
  apt-get update -y && \
  apt-get upgrade -y && \
  apt-get install --no-install-recommends --yes socat sshpass gettext-base \
    libnspr4 libnss3 libcrypto++8 xdg-utils xfce4-cpugraph-plugin \
    xfce4-netload-plugin xfce4-taskmanager xfce4-xkb-plugin xfce4-notes \
    gvfs gvfs-backends gvfs-fuse && \
  apt-get clean && \
  rm -rf /var/lib/apt/lists/* # end

# Copy files
COPY --from=setup /usr/local/i4j_jres/ /usr/local/i4j_jres
COPY --chown=abc:abc --from=setup /home/ibgateway/Jts ${TWS_PATH}
COPY --chown=abc:abc --from=setup /home/ibgateway/ibc ${IBC_PATH}
COPY ./tws-scripts/start_session.sh /custom-services.d/start_session.sh
COPY ./tws-scripts/run_tws.sh ${SCRIPT_PATH}
COPY ./scripts/* ${SCRIPT_PATH}

# labels
LABEL org.opencontainers.image.source=https://github.com/gnzsnz/ib-gateway-docker
LABEL org.opencontainers.image.url=https://github.com/gnzsnz/ib-gateway-docker/pkgs/container/tws-rdesktop
LABEL org.opencontainers.image.description="Docker image with XFCE, TWS & IBC"
LABEL org.opencontainers.image.licenses="Apache License Version 2.0"
LABEL org.opencontainers.image.version=${IB_GATEWAY_VERSION}-${IB_GATEWAY_RELEASE_CHANNEL}


==== ./ib-gateway-docker/latest/tws-scripts/run_tws.sh ====

#!/bin/bash
# shellcheck shell=bash
# shellcheck disable=SC1091,SC2317,SC2034

echo "*************************************************************************"
echo ".> Starting IBC/TWS"
echo "*************************************************************************"
# source common functions
source "${SCRIPT_PATH}/common.sh"

disable_agents() {
	## disable ssh and gpg agent
	# https://docs.xfce.org/xfce/xfce4-session/advanced
	if [ ! -f /config/.config/disable_agents ]; then
		echo ".> Disabling ssh-agent and gpg-agent"
		# disable xfce
		xfconf-query -c xfce4-session -p /startup/ssh-agent/enabled -n -t bool -s false
		xfconf-query -c xfce4-session -p /startup/gpg-agent/enabled -n -t bool -s false
		# kill ssh-agent and gpg-agent
		pkill -x ssh-agent
		pkill -x gpg-agent
		touch /config/.config/disable_agents
	else
		echo ".> Found '/config/.config/disable_agents' agents already disabled"
	fi
}

disable_compositing() {
	# disable compositing
	# https://github.com/gnzsnz/ib-gateway-docker/issues/55
	echo ".> Disabling xfce compositing"
	xfconf-query --channel=xfwm4 --property=/general/use_compositing --type=bool --set=false --create
}

start_IBC() {
	echo ".> Starting IBC in ${TRADING_MODE} mode, with params:"
	echo ".>		Version: ${TWS_MAJOR_VRSN}"
	echo ".>		program: ${IBC_COMMAND:-gateway}"
	echo ".>		tws-path: ${TWS_PATH}"
	echo ".>		ibc-path: ${IBC_PATH}"
	echo ".>		ibc-init: ${IBC_INI}"
	echo ".>		tws-settings-path: ${TWS_SETTINGS_PATH:-$TWS_PATH}"
	echo ".>		on2fatimeout: ${TWOFA_TIMEOUT_ACTION}"
	# start IBC
	"${IBC_PATH}/scripts/ibcstart.sh" "${TWS_MAJOR_VRSN}" \
		"--tws-path=${TWS_PATH}" \
		"--ibc-path=${IBC_PATH}" "--ibc-ini=${IBC_INI}" \
		"--on2fatimeout=${TWOFA_TIMEOUT_ACTION}" \
		"--tws-settings-path=${TWS_SETTINGS_PATH:-}" &
	_p="$!"
	pid+=("$_p")
	export pid
	echo "$_p" >"/tmp/pid_${TRADING_MODE}"
}

start_process() {
	# set API and socat ports
	set_ports
	# apply settings
	apply_settings
	# forward ports, socat/ssh
	port_forwarding

	start_IBC
}

###############################################################################
#####		Common Start
###############################################################################
# set display
export DISPLAY=:10

# user id
echo ".> Running as user"
id
# disable agents
disable_agents
# disable compositing
disable_compositing
# SSH
setup_ssh
# Java heap size
set_java_heap

###############################################################################
#####		Paper, Live or both start process
###############################################################################
if [ "$TRADING_MODE" == "both" ] || [ "$DUAL_MODE" == "yes" ]; then
	# start live and paper
	DUAL_MODE=yes
	export DUAL_MODE
	# start live first
	TRADING_MODE=live
	# add _live subfix
	_IBC_INI="${IBC_INI}"
	export _IBC_INI
	IBC_INI="${_IBC_INI}_${TRADING_MODE}"
	if [ -n "$TWS_SETTINGS_PATH" ]; then
		_TWS_SETTINGS_PATH="${TWS_SETTINGS_PATH}"
		export _TWS_SETTINGS_PATH
		TWS_SETTINGS_PATH="${_TWS_SETTINGS_PATH}_${TRADING_MODE}"
	else
		# no TWS settings
		_TWS_SETTINGS_PATH="${TWS_PATH}"
		export _TWS_SETTINGS_PATH
		TWS_SETTINGS_PATH="${_TWS_SETTINGS_PATH}_${TRADING_MODE}"
	fi
fi

start_process

if [ "$DUAL_MODE" == "yes" ]; then
	# running dual mode, start paper
	TRADING_MODE=paper
	TWS_USERID="${TWS_USERID_PAPER}"
	export TWS_USERID
	TWS_PASSWORD="${TWS_PASSWORD_PAPER}"
	export TWS_PASSWORD
	# disable duplicate ssh for vnc/rdp
	SSH_VNC_PORT=
	export SSH_VNC_PORT
	SSH_RDP_PORT=
	export SSH_RDP_PORT
	# in dual mode, ssh remote always == api port
	SSH_REMOTE_PORT=
	export SSH_REMOTE_PORT
	#
	IBC_INI="${_IBC_INI}_${TRADING_MODE}"
	TWS_SETTINGS_PATH="${_TWS_SETTINGS_PATH}_${TRADING_MODE}"

	sleep 15
	start_process
fi

wait "${pid[@]}"
_wait="$?"
echo ".> ************************** End run_tws.sh ******************************** <."
exit "$_wait"


==== ./ib-gateway-docker/latest/tws-scripts/start_session.sh ====

#!/usr/bin/with-contenv bash
# shellcheck shell=bash

echo "*************************************************************************"
echo ".> Launching IBC/TWS service"
echo "*************************************************************************"
# shellcheck disable=SC1091
# source common functions
source "${SCRIPT_PATH}/common.sh"

# set display
export DISPLAY=:10

# set user pass
_PASS=${PASSWD:-abc}
echo ".> Setting user password"
echo "abc:$_PASS" | chpasswd
id

if [ -n "${TZ}" ]; then
	echo ".> Setting timezone to: ${TZ}"
	echo "${TZ}" >/etc/timezone
fi

# open xfce session
echo ".> Openning Xrdp session"
echo "${_PASS}" | xrdp-sesrun -s 127.0.0.1 -F 0 abc

# setting permissions
echo ".> Setting permissions for ${TWS_PATH} and ${IBC_PATH}"
chown abc:abc -R /opt "${TWS_PATH}" "${IBC_PATH}"

sudo -EH -u abc "${SCRIPT_PATH}/run_tws.sh"


==== ./ib-gateway-docker/latest/scripts/run_ssh.sh ====

#!/bin/bash

_OPTIONS="$SSH_ALL_OPTIONS"
_LOCAL_PORT="$API_PORT"
_REMOTE_PORT="$SSH_REMOTE_PORT"
_SCREEN="$SSH_SCREEN"
_USER_TUNNEL="$SSH_USER_TUNNEL"
_RESTART="$SSH_RESTART"

while true; do
	echo ".> Starting ssh tunnel with ssh sock: $SSH_AUTH_SOCK"
	bash -c "ssh ${_OPTIONS} -TNR 127.0.0.1:${_LOCAL_PORT}:localhost:${_REMOTE_PORT} ${_SCREEN:-} ${_USER_TUNNEL}"
	sleep "${_RESTART:-5}"
done


==== ./ib-gateway-docker/latest/scripts/run.sh ====

#!/bin/bash
# shellcheck disable=SC2317
# Don't warn about unreachable commands in this file

echo "*************************************************************************"
echo ".> Starting IBC/IB gateway"
echo "*************************************************************************"

# shellcheck disable=SC1091
source "${SCRIPT_PATH}/common.sh"

stop_ibc() {
	echo ".> 😘 Received SIGINT or SIGTERM. Shutting down IB Gateway."

	#
	if [ -n "$VNC_SERVER_PASSWORD" ]; then
		echo ".> Stopping x11vnc."
		pkill x11vnc
	fi
	#
	echo ".> Stopping Xvfb."
	pkill Xvfb
	#
	if [ -n "$SSH_TUNNEL" ]; then
		echo ".> Stopping ssh."
		pkill run_ssh.sh
		pkill ssh
		echo ".> Stopping socat."
		pkill run_socat.sh
		pkill socat
	else
		echo ".> Stopping socat."
		pkill run_socat.sh
		pkill socat
	fi
	# Set TERM
	echo ".> Stopping IBC."
	kill -SIGTERM "${pid[@]}"
	# Wait for exit
	wait "${pid[@]}"
	# All done.
	echo ".> Done... $?"
}

start_xvfb() {
	# start Xvfb
	echo ".> Starting Xvfb server"
	DISPLAY=:1
	export DISPLAY
	rm -f /tmp/.X1-lock
	Xvfb $DISPLAY -ac -screen 0 1024x768x16 &
}

start_vnc() {
	# start VNC server
	if [ -n "$VNC_SERVER_PASSWORD" ]; then
		echo ".> Starting VNC server"
		x11vnc -ncache_cr -display :1 -forever -shared -bg -noipv6 -passwd "$VNC_SERVER_PASSWORD" &
	else
		echo ".> VNC server disabled"
	fi
}

start_IBC() {
	echo ".> Starting IBC in ${TRADING_MODE} mode, with params:"
	echo ".>		Version: ${TWS_MAJOR_VRSN}"
	echo ".>		program: ${IBC_COMMAND:-gateway}"
	echo ".>		tws-path: ${TWS_PATH}"
	echo ".>		ibc-path: ${IBC_PATH}"
	echo ".>		ibc-init: ${IBC_INI}"
	echo ".>		tws-settings-path: ${TWS_SETTINGS_PATH:-$TWS_PATH}"
	echo ".>		on2fatimeout: ${TWOFA_TIMEOUT_ACTION}"
	# start IBC -g for gateway
	"${IBC_PATH}/scripts/ibcstart.sh" "${TWS_MAJOR_VRSN}" -g \
		"--tws-path=${TWS_PATH}" \
		"--ibc-path=${IBC_PATH}" "--ibc-ini=${IBC_INI}" \
		"--on2fatimeout=${TWOFA_TIMEOUT_ACTION}" \
		"--tws-settings-path=${TWS_SETTINGS_PATH:-}" &
	_p="$!"
	pid+=("$_p")
	export pid
	echo "$_p" >"/tmp/pid_${TRADING_MODE}"
}

start_process() {
	# set API and socat ports
	set_ports
	# apply settings
	apply_settings
	# forward ports, socat/ssh
	port_forwarding

	start_IBC
}

###############################################################################
#####		Common Start
###############################################################################
# start Xvfb
start_xvfb

# setup SSH Tunnel
setup_ssh

# Java heap size
set_java_heap

# start VNC server
start_vnc

###############################################################################
#####		Paper, Live or both start process
###############################################################################

if [ "$TRADING_MODE" == "both" ] || [ "$DUAL_MODE" == "yes" ]; then
	# start live and paper
	DUAL_MODE=yes
	export DUAL_MODE
	# start live first
	TRADING_MODE=live
	# add _live subfix
	_IBC_INI="${IBC_INI}"
	export _IBC_INI
	IBC_INI="${_IBC_INI}_${TRADING_MODE}"
	if [ -n "$TWS_SETTINGS_PATH" ]; then
		_TWS_SETTINGS_PATH="${TWS_SETTINGS_PATH}"
		export _TWS_SETTINGS_PATH
		TWS_SETTINGS_PATH="${_TWS_SETTINGS_PATH}_${TRADING_MODE}"
	else
		# no TWS settings
		_TWS_SETTINGS_PATH="${TWS_PATH}"
		export _TWS_SETTINGS_PATH
		TWS_SETTINGS_PATH="${_TWS_SETTINGS_PATH}_${TRADING_MODE}"
	fi
fi

start_process

if [ "$DUAL_MODE" == "yes" ]; then
	# running dual mode, start paper
	TRADING_MODE=paper
	TWS_USERID="${TWS_USERID_PAPER}"
	export TWS_USERID
	TWS_PASSWORD="${TWS_PASSWORD_PAPER}"
	export TWS_PASSWORD
	# disable duplicate ssh for vnc/rdp
	SSH_VNC_PORT=
	export SSH_VNC_PORT
	# in dual mode, ssh remote always == api port
	SSH_REMOTE_PORT=
	export SSH_REMOTE_PORT
	#
	IBC_INI="${_IBC_INI}_${TRADING_MODE}"
	TWS_SETTINGS_PATH="${_TWS_SETTINGS_PATH}_${TRADING_MODE}"

	sleep 15
	start_process
fi

trap stop_ibc SIGINT SIGTERM
wait "${pid[@]}"
exit $?


==== ./ib-gateway-docker/latest/scripts/port_forwarding.sh ====

#!/bin/bash

start_ssh() {
	if [ -n "$(pgrep -x ssh)" ]; then
		# if this script is already running don't start it
		echo ".> SSH tunnel already active. Not starting a new one"
		exit 0
	fi

	if [ -z "$SSH_REMOTE_PORT" ]; then
		# by default remote port is same than API_PORT
		SSH_REMOTE_PORT="$API_PORT"
	fi
	echo ".> SSH_REMOTE_PORT set to :${SSH_REMOTE_PORT}"

	# set vnc ssh tunnel
	if [ "$GATEWAY_OR_TWS" = "gateway" ] && [ -n "$SSH_VNC_PORT" ] && [ -n "$VNC_SERVER_PASSWORD" ]; then
		# set ssh tunnel for vnc
		SSH_SCREEN="-R 127.0.0.1:5900:localhost:$SSH_VNC_PORT"
		echo ".> SSH_VNC_TUNNEL set to :${SSH_SCREEN}"
	fi

	# set rdp ssh tunnel
	if [ "$GATEWAY_OR_TWS" = "tws" ] && [ -n "$SSH_RDP_PORT" ]; then
		# set ssh tunnel for rdp
		SSH_SCREEN="-R 127.0.0.1:3389:localhost:$SSH_RDP_PORT"
		echo ".> SSH_RDP_TUNNEL set to :${SSH_SCREEN}"
	fi

	if [ "$SSH_TUNNEL" = "both" ]; then
		start_socat
	fi

	while true; do
		echo ".> Starting ssh tunnel with ssh sock: $SSH_AUTH_SOCK"
		bash -c "ssh ${SSH_ALL_OPTIONS} -TNR 127.0.0.1:${API_PORT}:localhost:${SSH_REMOTE_PORT} ${SSH_SCREEN:-} ${SSH_USER_TUNNEL}"
		sleep "${SSH_RESTART:-5}"
	done
}

start_socat() {
	if [ -z "${SOCAT_PORT}" ]; then
		echo ".> SOCAT_PORT not set, port: ${SOCAT_PORT}"
		exit 1
	fi
	if [ -n "$(pgrep -x socat)" ]; then
		# if this script is already running don't start it
		echo ".> socat already active. Not starting a new one"
		exit 0
	fi
	# no ssh tunnel, start socat
	echo ".> Waiting for socat to start"
	sleep 30

	#
	printf "Forking :::%d onto 0.0.0.0:%d > trading mode %s \n" \
		"${API_PORT}" "${SOCAT_PORT}" "${TRADING_MODE}"
	socat TCP-LISTEN:"${SOCAT_PORT}",fork TCP:127.0.0.1:"${API_PORT}" &
}

# validate API port
if [ -z "${API_PORT}" ]; then
	echo ".> API_PORT not set, port: ${API_PORT}"
	exit 1
fi

if [ "$SSH_TUNNEL" = "yes" ] || [ "$SSH_TUNNEL" = "both" ]; then
	start_ssh
else
	start_socat
fi


==== ./ib-gateway-docker/latest/scripts/run_socat.sh ====

#!/bin/bash

LOCAL_PORT="$API_PORT"
# shellcheck disable=SC2153
PUBLISHED_PORT="$SOCAT_PORT"
_RESTART="$SSH_RESTART"

while true; do
	printf "Forking :::%d onto 0.0.0.0:%d > trading mode %s \n" \
		"${LOCAL_PORT}" "${PUBLISHED_PORT}" "${TRADING_MODE}"
	socat TCP-LISTEN:"${PUBLISHED_PORT}",fork TCP:127.0.0.1:"${LOCAL_PORT}"
	sleep "${_RESTART:-5}"
done


==== ./ib-gateway-docker/latest/scripts/common.sh ====

#!/bin/bash
# shellcheck disable=SC1091

apply_settings() {
	# apply env variables into IBC and gateway/TWS config files
	if [ "$CUSTOM_CONFIG" != "yes" ]; then
		echo ".> Appling settings to IBC's config.ini"
		# replace env variables
		envsubst <"${IBC_INI_TMPL}" >"${IBC_INI}"

		# where are settings stored
		if [ -n "$TWS_SETTINGS_PATH" ]; then
			echo ".> Settings directory set to: $TWS_SETTINGS_PATH"
			_JTS_PATH=$TWS_SETTINGS_PATH
			if [ ! -d "$TWS_SETTINGS_PATH" ]; then
				# if TWS_SETTINGS_PATH does not exists, create it
				echo ".> Creating directory: $TWS_SETTINGS_PATH"
				mkdir "$TWS_SETTINGS_PATH"
			fi
		else
			echo ".> Settings directory NOT set, defaulting to: $TWS_PATH"
			_JTS_PATH=$TWS_PATH
		fi
		# only if jts.ini does not exists
		if [ ! -f "$_JTS_PATH/$TWS_INI" ]; then
			echo ".> Setting timezone in ${_JTS_PATH}/${TWS_INI}"
			envsubst <"${TWS_PATH}/${TWS_INI_TMPL}" >"${_JTS_PATH}/${TWS_INI}"
		else
			echo ".> File jts.ini already exists, not setting timezone"
		fi
	else
		echo ".> Using CUSTOM_CONFIG, (value:${CUSTOM_CONFIG})"
	fi
}

set_ports() {
	# set ports for API and SOCAT

	# ibgateway ports
	if [ "${GATEWAY_OR_TWS}" = "gateway" ]; then
		if [ "$TRADING_MODE" = "paper" ]; then
			# paper ibgateway ports
			API_PORT=4002
			SOCAT_PORT=4004
			export API_PORT SOCAT_PORT
		elif [ "$TRADING_MODE" = "live" ]; then
			# live ibgateway ports
			API_PORT=4001
			SOCAT_PORT=4003
			export API_PORT SOCAT_PORT
		else
			# invalid option
			echo ".> Invalid TRADING_MODE: $TRADING_MODE"
			exit 1
		fi
	elif [ "${GATEWAY_OR_TWS}" = "tws" ]; then
		if [ "$TRADING_MODE" = "paper" ]; then
			# paper TWS ports
			API_PORT=7497
			SOCAT_PORT=7499
			export API_PORT SOCAT_PORT
		elif [ "$TRADING_MODE" = "live" ]; then
			# live TWS ports
			API_PORT=7496
			SOCAT_PORT=7498
			export API_PORT SOCAT_PORT
		else
			# invalid option
			echo ".> Invalid TRADING_MODE: $TRADING_MODE"
			exit 1
		fi
	fi
	echo ".> API_PORT set to: ${API_PORT}"
	echo ".> SOCAT_PORT set to: ${SOCAT_PORT}"

}

set_java_heap() {
	# set java heap size in vm options
	if [ -n "${JAVA_HEAP_SIZE}" ]; then
		_vmpath="${TWS_PATH}/ibgateway/${IB_GATEWAY_VERSION}"
		_string="s/-Xmx768m/-Xmx${JAVA_HEAP_SIZE}m/g"
		sed -i "${_string}" "${_vmpath}/ibgateway.vmoptions"
		echo ".> Java heap size set to ${JAVA_HEAP_SIZE}m"
	else
		echo ".> Usign default Java heap size 768m."
	fi
}

port_forwarding() {
	echo ".> Starting Port Forwarding."
	# validate API port
	if [ -z "${API_PORT}" ]; then
		echo ".> API_PORT not set, port: ${API_PORT}"
		exit 1
	fi

	if [ "$SSH_TUNNEL" = "yes" ] || [ "$SSH_TUNNEL" = "both" ]; then
		echo ".> Starting SSH Tunnel"
		# start socat of tunnel = both
		if [ "$SSH_TUNNEL" = "both" ]; then
			echo ".> Starting socat"
			start_socat
		fi
		# ssh
		start_ssh
	else
		echo ".> Starting socat"
		start_socat
	fi
}

setup_ssh() {
	# prepare SSH Tunnel
	if [ "$SSH_TUNNEL" = "yes" ] || [ "$SSH_TUNNEL" = "both" ]; then
		echo ".> Setting SSH tunnel"

		_SSH_OPTIONS="-o ServerAliveInterval=${SSH_ALIVE_INTERVAL:-20}"
		_SSH_OPTIONS+=" -o ServerAliveCountMax=${SSH_ALIVE_COUNT:-3}"

		if [ -n "$SSH_OPTIONS" ]; then
			_SSH_OPTIONS+=" $SSH_OPTIONS"
		fi
		SSH_ALL_OPTIONS="$_SSH_OPTIONS"
		export SSH_ALL_OPTIONS
		echo ".> SSH options: $SSH_ALL_OPTIONS"

		if [ -n "$SSH_PASSPHRASE" ]; then
			if ! pgrep ssh-agent >/dev/null; then
				# start agent if it's not already running
				# https://wiki.archlinux.org/title/SSH_keys#SSH_agents
				echo ".> Starting ssh-agent."
				ssh-agent >"${HOME}/.ssh-agent.env"
				source "${HOME}/.ssh-agent.env"
				echo ".> ssh-agent sock: ${SSH_AUTH_SOCK}"
			else
				echo ".> ssh-agent already running"
				if [ -z "${SSH_AUTH_SOCK}" ]; then
					echo ".> Loading agent environment"
					source "${HOME}/.ssh-agent.env"
				fi
				echo ".> ssh-agent sock: ${SSH_AUTH_SOCK}"
			fi

			echo ".> Adding keys to ssh-agent."
			export SSH_ASKPASS_REQUIRE=never
			SSHPASS="${SSH_PASSPHRASE}" sshpass -e -P "passphrase" ssh-add
			echo ".> ssh-agent identities: $(ssh-add -l)"
		fi
	else
		echo ".> SSH tunnel disabled"
	fi
}

start_ssh() {
	if [ -n "$(pgrep -f "127.0.0.1:${API_PORT}:localhost:")" ]; then
		# if this script is already running don't start it
		echo ".> SSH tunnel already active. Not starting a new one"
		return 0
	fi

	if [ -z "$SSH_REMOTE_PORT" ]; then
		# by default remote port is same than API_PORT
		SSH_REMOTE_PORT="$API_PORT"
	fi
	echo ".> SSH_REMOTE_PORT set to :${SSH_REMOTE_PORT}"

	# set vnc ssh tunnel
	if [ "$GATEWAY_OR_TWS" = "gateway" ] && [ -n "$SSH_VNC_PORT" ] && [ -n "$VNC_SERVER_PASSWORD" ]; then
		# set ssh tunnel for vnc
		SSH_SCREEN="-R 127.0.0.1:5900:localhost:$SSH_VNC_PORT"
		echo ".> SSH_VNC_TUNNEL set to :${SSH_SCREEN}"
	elif [ "$GATEWAY_OR_TWS" = "tws" ] && [ -n "$SSH_RDP_PORT" ]; then
		# set ssh tunnel for rdp
		SSH_SCREEN="-R 127.0.0.1:3389:localhost:$SSH_RDP_PORT"
		echo ".> SSH_RDP_TUNNEL set to :${SSH_SCREEN}"
	else
		# no ssh screen
		SSH_SCREEN=
	fi

	export SSH_ALL_OPTIONS SSH_SCREEN SSH_REMOTE_PORT
	# run ssh client
	"${SCRIPT_PATH}/run_ssh.sh" &
}

start_socat() {
	# run socat
	if [ -z "${SOCAT_PORT}" ]; then
		echo ".> SOCAT_PORT not set, port: ${SOCAT_PORT}"
		exit 1
	fi
	if [ -n "$(pgrep -f "fork TCP:127.0.0.1:${API_PORT}")" ]; then
		# if this script is already running don't start it
		echo ".> socat already active. Not starting a new one"
		return 0
	else
		# start socat
		"${SCRIPT_PATH}/run_socat.sh" &
	fi

}


==== ./ib-gateway-docker/latest/scripts/run_x11_vnc.sh ====

#!/bin/bash

x11vnc -ncache_cr -display :1 -forever -shared -bg -noipv6 -passwd "$VNC_SERVER_PASSWORD"


==== ./ib-gateway-docker/latest/config/ibc/config.ini.tmpl ====

# Note that in the comments in this file, TWS refers to both the Trader
# Workstation and the IB Gateway, unless explicitly stated otherwise.
#
# When referred to below, the default value for a setting is the value
# assumed if either the setting is included but no value is specified, or
# the setting is not included at all.
#
# IBC may also be used to start the FIX CTCI Gateway. All settings
# relating to this have names prefixed with FIX.
#
# The IB API Gateway and the FIX CTCI Gateway share the same code. Which
# gateway actually runs is governed by an option on the initial gateway
# login screen. The FIX setting described under IBC Startup
# Settings below controls this.



# =============================================================================
# 1.   IBC Startup Settings
# =============================================================================


# IBC may be used to start the IB Gateway for the FIX CTCI. This
# setting must be set to 'yes' if you want to run the FIX CTCI gateway. The
# default is 'no'.

FIX=no



# =============================================================================
# 2.   Authentication Settings
# =============================================================================

# TWS and the IB API gateway require a single username and password.
# You may specify the username and password using the following settings:
#
#	IbLoginId
#	IbPassword
#
# Alternatively, you can specify the username and password in the command
# files used to start TWS or the Gateway, but this is not recommended for
# security reasons.
#
# If you don't specify them, you will be prompted for them in the usual
# login dialog when TWS starts (but whatever you have specified will be
# included in the dialog automatically: for example you may specify the
# username but not the password, and then you will be prompted for the
# password via the login dialog). Note that if you specify either
# the username or the password (or both) in the command file, then
# IbLoginId and IbPassword settings defined in this file are ignored.
#
#
# The FIX CTCI gateway requires one username and password for FIX order
# routing, and optionally a separate username and password for market
# data connections. You may specify the usernames and passwords using
# the following settings:
#
#	FIXLoginId
#	FIXPassword
#	IbLoginId	(optional - for market data connections)
#	IbPassword	(optional - for market data connections)
#
# Alternatively you can specify the FIX username and password in the
# command file used to start the FIX CTCI Gateway, but this is not
# recommended for security reasons.
#
# If you don't specify them, you will be prompted for them in the usual
# login dialog when FIX CTCI gateway starts (but whatever you have
# specified will be included in the dialog automatically: for example
# you may specify the usernames but not the passwords, and then you will
# be prompted for the passwords via the login dialog). Note that if you
# specify either the FIX username or the FIX password (or both) on the
# command line, then FIXLoginId and FIXPassword settings defined in this
# file are ignored; he same applies to the market data username and
# password.

# IB API Authentication Settings
# ------------------------------

# Your TWS username:

IbLoginId=${TWS_USERID}


# Your TWS password:

IbPassword=${TWS_PASSWORD}


# FIX CTCI Authentication Settings
# --------------------------------

# Your FIX CTCI username:

FIXLoginId=


# Your FIX CTCI password:

FIXPassword=


# Second Factor Authentication Settings
# -------------------------------------

# If you have enabled more than one second factor authentication
# device, TWS presents a list from which you must select the device
# you want to use for this login. You can use this setting to
# instruct IBC to select a particular item in the list on your
# behalf. Note that you must spell this value exactly as it appears
# in the list. If no value is set, you must manually select the
# relevant list entry.

SecondFactorDevice=


# If you use the IBKR Mobile app for second factor authentication,
# and you fail to complete the process before the time limit imposed
# by IBKR, this setting tells IBC whether to automatically restart
# the login sequence, giving you another opportunity to complete
# second factor authentication.
#
# Permitted values are 'yes' and 'no'.
#
# If this setting is not present or has no value, then the value
# of the deprecated ExitAfterSecondFactorAuthenticationTimeout is
# used instead. If this also has no value, then this setting defaults
# to 'no'.
#
# NB: you must be using IBC v3.14.0 or later to use this setting:
# earlier versions ignore it.

ReloginAfterSecondFactorAuthenticationTimeout=${RELOGIN_AFTER_TWOFA_TIMEOUT}


# This setting is only relevant if
# ReloginAfterSecondFactorAuthenticationTimeout is set to 'yes',
# or if ExitAfterSecondFactorAuthenticationTimeout is set to 'yes'.
#
# It controls how long (in seconds) IBC waits for login to complete
# after the user acknowledges the second factor authentication
# alert at the IBKR Mobile app. If login has not completed after
# this time, IBC terminates.
# The default value is 60.

SecondFactorAuthenticationExitInterval=${TWOFA_EXIT_INTERVAL}


# This setting specifies the timeout for second factor authentication
# imposed by IB. The value is in seconds. You should not change this
# setting unless you have reason to believe that IB has changed the
# timeout. The default value is 180.

SecondFactorAuthenticationTimeout=180


# DEPRECATED SETTING
# ------------------
#
# ExitAfterSecondFactorAuthenticationTimeout - THIS SETTING WILL BE
# REMOVED IN A FUTURE RELEASE. For IBC version 3.14.0 and later, see
# the notes for ReloginAfterSecondFactorAuthenticationTimeout above.
#
# For IBC versions earlier than 3.14.0: If you use the IBKR Mobile
# app for second factor authentication, and you fail to complete the
# process before the time limit imposed by IBKR, you can use this
# setting to tell IBC to exit: arrangements can then be made to
# automatically restart IBC in order to initiate the login sequence
# afresh. Otherwise, manual intervention at TWS's
# Second Factor Authentication dialog is needed to complete the
# login.
#
# Permitted values are 'yes' and 'no'. The default is 'no'.
#
# Note that the scripts provided with the IBC zips for Windows and
# Linux provide options to automatically restart in these
# circumstances, but only if this setting is also set to 'yes'.

ExitAfterSecondFactorAuthenticationTimeout=no


# Trading Mode
# ------------
#
# This indicates whether the live account or the paper trading
# account corresponding to the supplied credentials is to be used.
# The allowed values are 'live' (the default) and 'paper'.
#
# If this is set to 'live', then the credentials for the live
# account must be supplied. If it is set to 'paper', then either
# the live or the paper-trading credentials may be supplied.

TradingMode=${TRADING_MODE}


# Paper-trading Account Warning
# -----------------------------
#
# Logging in to a paper-trading account results in TWS displaying
# a dialog asking the user to confirm that they are aware that this
# is not a brokerage account. Until this dialog has been accepted,
# TWS will not allow API connections to succeed. Setting this
# to 'yes' (the default) will cause IBC to automatically
# confirm acceptance. Setting it to 'no' will leave the dialog
# on display, and the user will have to deal with it manually.

AcceptNonBrokerageAccountWarning=yes


# Login Dialog Display Timeout
#-----------------------------
#
# In some circumstances, starting TWS may result in failure to display
# the login dialog. Restarting TWS may help to resolve this situation,
# and IBC does this automatically.
#
# This setting controls how long (in seconds) IBC waits for the login
# dialog to appear before restarting TWS.
#
# Note that in normal circumstances with a reasonably specified
# computer the time to displaying the login dialog is typically less
# than 20 seconds, and frequently much less. However many factors can
# influence this, and it is unwise to set this value too low.
#
# The default value is 60.

LoginDialogDisplayTimeout=60



# =============================================================================
# 3.   TWS Startup Settings
# =============================================================================

# Path to settings store
# ----------------------
#
# Path to the directory where TWS should store its settings. This is
# normally the folder in which TWS is installed. However you may set
# it to some other location if you wish (for example if you want to
# run multiple instances of TWS with different settings).
#
# It is recommended for clarity that you use an absolute path. The
# effect of using a relative path is undefined.
#
# Linux and macOS users should use the appropriate path syntax.
#
# Note that, for Windows users, you MUST use double separator
# characters to separate the elements of the folder path: for
# example, IbDir=C:\\IBLiveSettings is valid, but
# IbDir=C:\IBLiveSettings is NOT valid and will give unexpected
# results. Linux and macOS users need not use double separators,
# but they are acceptable.
#
# The default is the current working directory when IBC is
# started, unless the TWS_SETTINGS_PATH setting in the relevant
# start script is set.
#
# If both this setting and TWS_SETTINGS_PATH are set, then this
# setting takes priority. Note that if they have different values,
# auto-restart will not work.
#
# NB: this setting is now DEPRECATED. You should use the
# TWS_SETTINGS_PATH setting in the relevant start script.

#IbDir=/home/ibgateway/Jts


# Store settings on server
# ------------------------
#
# If you wish to store a copy of your TWS settings on IB's
# servers as well as locally on your computer, set this to
# 'yes': this enables you to run TWS on different computers
# with the same configuration, market data lines, etc. If set
# to 'no', running TWS on different computers will not share the
# same settings. If no value is specified, TWS will obtain its
# settings from the same place as the last time this user logged
# in (whether manually or using IBC).

StoreSettingsOnServer=


# Minimize TWS on startup
# -----------------------
#
# Set to 'yes' to minimize TWS when it starts:

MinimizeMainWindow=no


# Existing Session Detected Action
# --------------------------------
#
# When a user logs on to an IBKR account for trading purposes by any means, the
# IBKR account server checks to see whether the account is already logged in
# elsewhere. If so, a dialog is displayed to both the users that enables them
# to determine what happens next. The 'ExistingSessionDetectedAction' setting
# instructs TWS how to proceed when it displays this dialog:
#
#   * If the new TWS session is set to 'secondary', the existing session continues
#     and the new session terminates. Thus a secondary TWS session can never
#     override any other session.
#
#   * If the existing TWS session is set to 'primary', the existing session
#     continues and the new session terminates (even if the new session is also
#     set to primary). Thus a primary TWS session can never be overridden by
#     any new session).
#
#   * If both the existing and the new TWS sessions are set to 'primaryoverride',
#     the existing session terminates and the new session proceeds.
#
#   * If the existing TWS session is set to 'manual', the user must handle the
#     dialog.
#
# The difference between 'primary' and 'primaryoverride' is that a
# 'primaryoverride' session can be overriden over by a new 'primary' session,
# but a 'primary' session cannot be overriden by any other session.
#
# When set to 'primary', if another TWS session is started and manually told to
# end the 'primary' session, the 'primary' session is automatically reconnected.
#
# The default is 'manual'.

ExistingSessionDetectedAction=primary


# Override TWS API Port Number
# ----------------------------
#
# If OverrideTwsApiPort is set to an integer, IBC changes the
# 'Socket port' in TWS's API configuration to that number shortly
# after startup (but note that for the FIX Gateway, this setting is
# actually stored in jts.ini rather than the Gateway's settings
# file). Leaving the setting blank will make no change to
# the current setting. This setting is only intended for use in
# certain specialized situations where the port number needs to
# be set dynamically at run-time, and for the FIX Gateway: most
# non-FIX users will never need it, so don't use it unless you know
# you need it.

OverrideTwsApiPort=


# Override TWS Master Client ID
# -----------------------------
#
# If OverrideTwsMasterClientID is set to an integer, IBC changes the
# 'Master Client ID' value in TWS's API configuration to that
# value shortly after startup. Leaving the setting blank will make
# no change to the current setting. This setting is only intended
# for use in certain specialized situations where the value needs to
# be set dynamically at run-time: most users will never need it,
# so don't use it unless you know you need it.

OverrideTwsMasterClientID=


# Read-only Login
# ---------------
#
# If ReadOnlyLogin is set to 'yes', and the user is enrolled in IB's
# account security programme, the user will not be asked to perform
# the second factor authentication action, and login to TWS will
# occur automatically in read-only mode: in this mode, placing or
# managing orders is not allowed.
#
# If set to 'no', and the user is enrolled in IB's account security
# programme, the second factor authentication process is handled
# according to the Second Factor Authentication Settings described
# elsewhere in this file.
#
# If the user is not enrolled in IB's account security programme,
# this setting is ignored. The default is 'no'.

ReadOnlyLogin=no


# Read-only API
# -------------
#
# If ReadOnlyApi is set to 'yes', API programs cannot submit, modify
# or cancel orders. If set to 'no', API programs can do these things.
# If not set, the existing TWS/Gateway configuration is unchanged.
# NB: this setting is really only supplied for the benefit of new TWS
# or Gateway instances that are being automatically installed and
# started without user intervention (eg Docker containers). Where
# a user is involved, they should use the Global Configuration to
# set the relevant checkbox (this only needs to be done once) and
# not provide a value for this setting.

ReadOnlyApi=${READ_ONLY_API}


# API Precautions
# ---------------
#
# These settings relate to the corresponding 'Precautions' checkboxes in the
# API section of the Global Configuration dialog.
#
# For all of these, the accepted values are:
# - 'yes' sets the checkbox
# - 'no' clears the checkbox
# - if not set, the existing TWS/Gateway configuration is unchanged
#
# NB: thess settings are really only supplied for the benefit of new TWS
# or Gateway instances that are being automatically installed and
# started without user intervention, or where user settings are not preserved
# between sessions (eg some Docker containers). Where a user is involved, they
# should use the Global Configuration to set the relevant checkboxes and not
# provide values for these settings.

BypassOrderPrecautions=${BYPASS_WARNING}

BypassBondWarning=${BYPASS_WARNING}

BypassNegativeYieldToWorstConfirmation=${BYPASS_WARNING}

BypassCalledBondWarning=${BYPASS_WARNING}

BypassSameActionPairTradeWarning=${BYPASS_WARNING}

BypassPriceBasedVolatilityRiskWarning=${BYPASS_WARNING}

BypassUSStocksMarketDataInSharesWarning=${BYPASS_WARNING}

BypassRedirectOrderWarning=${BYPASS_WARNING}

BypassNoOverfillProtectionPrecaution=${BYPASS_WARNING}


# Market data size for US stocks - lots or shares
# -----------------------------------------------
#
# Since IB introduced the option of market data for US stocks showing
# bid, ask and last sizes in shares rather than lots, TWS and Gateway
# display a dialog immediately after login notifying the user about
# this and requiring user input before allowing market data to be
# accessed. The user can request that the dialog not be shown again.
#
# It is recommended that the user should handle this dialog manually
# rather than using these settings, which are provided for situations
# where the user interface is not easily accessible, or where user
# settings are not preserved between sessions (eg some Docker images).
#
# - If this setting is set to 'accept', the dialog will be handled
#   automatically and the option to not show it again will be
#   selected.
#
#   Note that in this case, the only way to allow the dialog to be
#   displayed again is to manually enable the 'Bid, Ask and Last
#   Size Display Update' message in the 'Messages' section of the TWS
#   configuration dialog. So you should only use 'Accept' if you are
#   sure you really don't want the dialog to be displayed again, or
#   you have easy access to the user interface.
#
# - If set to 'defer', the dialog will be handled automatically (so
#   that market data will start), but the option to not show it again
#   will not be selected, and it will be shown again after the next
#   login.
#
# - If set to 'ignore', the user has to deal with the dialog manually.
#
# The default value is 'ignore'.
#
# Note if set to 'accept' or 'defer', TWS also automatically sets
# the API settings checkbox labelled 'Send market data in lots for
# US stocks for dual-mode API clients'. IBC cannot prevent this.
# However you can change this immmediately by setting
# SendMarketDataInLotsForUSstocks (see below) to 'no' .

AcceptBidAskLastSizeDisplayUpdateNotification=accept


# This setting determines whether the API settings checkbox labelled
# 'Send market data in lots for US stocks for dual-mode API clients'
# is set or cleared. If set to 'yes', the checkbox is set. If set to
# 'no' the checkbox is cleared. If defaulted, the checkbox is
# unchanged.

SendMarketDataInLotsForUSstocks=


# Trusted API Client IPs
# ----------------------
#
# NB: THIS SETTING IS ONLY RELEVANT FOR THE GATEWAY, AND ONLY WHEN FIX=yes.
# In all other cases it is ignored.
#
# This is a list of IP addresses separated by commas. API clients with IP
# addresses in this list are able to connect to the API without Gateway
# generating the 'Incoming connection' popup.
#
# Note that 127.0.0.1 is always permitted to connect, so do not include it
# in this setting.

TrustedTwsApiClientIPs=


# Reset Order ID Sequence
# -----------------------
#
# The setting resets the order id sequence for orders submitted via the API, so
# that the next invocation of the `NextValidId` API callback will return the
# value 1. The reset occurs when TWS starts.
#
# Note that order ids are reset for all API clients, except those that have
# outstanding (ie incomplete) orders: their order id sequence carries on as
# before.
#
# Valid values are 'yes', 'true', 'false' and 'no'. The default is 'no'.

ResetOrderIdsAtStart=


# This setting specifies IBC's action when TWS displays the dialog asking for
# confirmation of a request to reset the API order id sequence.
#
# Note that the Gateway never displays this dialog, so this setting is ignored
# for a Gateway session.
#
# Valid values consist of two strings separated by a solidus '/'. The first
# value specifies the action to take when the order id reset request resulted
# from setting ResetOrderIdsAtStart=yes. The second specifies the action to
# take when the order id reset request is a result of the user clicking the
# 'Reset API order ID sequence' button in the API configuration. Each value
# must be one of the following:
#
#    'confirm'
#        order ids will be reset
#
#    'reject'
#        order ids will not be reset
#
#    'ignore'
#        IBC will ignore the dialog. The user must take action.
#
#    The default setting is ignore/ignore

# Examples:
#
#    'confirm/reject' - confirm order id reset only if ResetOrderIdsAtStart=yes
#                       and reject any user-initiated requests
#
#    'ignore/confirm' - user must decide what to do if ResetOrderIdsAtStart=yes
#                       and confirm user-initiated requests
#
#    'reject/ignore'  - reject order id reset if  ResetOrderIdsAtStart=yes but
#                       allow user to handle user-initiated requests

ConfirmOrderIdReset=



# =============================================================================
# 4.   TWS Auto-Logoff and Auto-Restart
# =============================================================================
#
# TWS and Gateway insist on being restarted every day. Two alternative
# automatic options are offered:
#
#    - Auto-Logoff: at a specified time, TWS shuts down tidily, without
#      restarting.
#
#    - Auto-Restart: at a specified time, TWS shuts down and then restarts
#      without the user having to re-autheticate.
#
# The normal way to configure the time at which this happens is via the Lock
# and Exit section of the Configuration dialog. Once this time has been
# configured in this way, the setting persists until the user changes it again.
#
# However, there are situations where there is no user available to do this
# configuration, or where there is no persistent storage (for example some
# Docker images). In such cases, the auto-restart or auto-logoff time can be
# set whenever IBC starts with the settings below.
#
# The value, if specified, must be a time in HH:MM AM/PM format, for example
# 08:00 AM or 10:00 PM. Note that there must be a single space between the
# two parts of this value; also that midnight is "12:00 AM" and midday is
# "12:00 PM".
#
# If no value is specified for either setting, the currently configured
# settings will apply. If a value is supplied for one setting, the other
# setting is cleared. If values are supplied for both settings, only the
# auto-restart time is set, and the auto-logoff time is cleared.
#
# Note that for a normal TWS/Gateway installation with persistent storage
# (for example on a desktop computer) the value will be persisted as if the
# user had set it via the configuration dialog.
#
# If you choose to auto-restart, you should take note of the considerations
# described at the link below. Note that where this information mentions
# 'manual authentication', restarting IBC will do the job (IBKR does not
# recognise the existence of IBC in its docuemntation).
#
#  https://www.interactivebrokers.com/en/software/tws/twsguide.htm#usersguidebook/configuretws/auto_restart_info.htm
#
# If you use the "RESTART" command via the IBC command server, and IBC is
# running any version of the Gateway (or a version of TWS earlier than 1018),
# note that this will set the Auto-Restart time in Gateway/TWS's configuration
# dialog to the time at which the restart actually happens (which may be up to
# a minute after the RESTART command is issued). To prevent future auto-
# restarts at this time, you must make sure you have set AutoLogoffTime or
# AutoRestartTime to your desired value before running IBC. NB: this does not
# apply to TWS from version 1018 onwards.

AutoLogoffTime=${AUTO_LOGOFF_TIME}

AutoRestartTime=${AUTO_RESTART_TIME}


# =============================================================================
# 5.   TWS Tidy Closedown Time
# =============================================================================
#
# Specifies a time at which TWS will close down tidily, with no restart.
#
# There is little reason to use this setting. It is similar to AutoLogoffTime,
# but can include a day-of-the-week, whereas AutoLogoffTime and AutoRestartTime
# apply every day. So for example you could use ClosedownAt in conjunction with
# AutoRestartTime to shut down TWS on Friday evenings after the markets
# close, without it running on Saturday as well.
#
# To tell IBC to tidily close TWS at a specified time every
# day, set this value to <hh:mm>, for example:
# ClosedownAt=22:00
#
# To tell IBC to tidily close TWS at a specified day and time
# each week, set this value to <dayOfWeek hh:mm>, for example:
# ClosedownAt=Friday 22:00
#
# Note that the day of the week must be specified using your
# default locale. Also note that Java will only accept
# characters encoded to ISO 8859-1 (Latin-1). This means that
# if the day name in your default locale uses any non-Latin-1
# characters you need to encode them using Unicode escapes
# (see http://java.sun.com/docs/books/jls/third_edition/html/lexical.html#3.3
# for details). For example, to tidily close TWS at 12:00 on
# Saturday where the default locale is Simplified Chinese,
# use the following:
# #ClosedownAt=\u661F\u671F\u516D 12:00

ClosedownAt=



# =============================================================================
# 6.   Other TWS Settings
# =============================================================================

# Accept Incoming Connection
# --------------------------
#
# If set to 'accept', IBC automatically accepts incoming
# API connection dialogs. If set to 'reject', IBC
# automatically rejects incoming API connection dialogs. If
# set to 'manual', the user must decide whether to accept or reject
# incoming API connection dialogs. The default is 'manual'.
# NB: it is recommended to set this to 'reject', and to explicitly
# configure which IP addresses can connect to the API in TWS's API
# configuration page, as this is much more secure (in this case, no
# incoming API connection dialogs will occur for those IP addresses).

AcceptIncomingConnectionAction=reject


# Allow Blind Trading
# -------------------
#
# If you attempt to place an order for a contract for which
# you have no market data subscription, TWS displays a dialog
# to warn you against such blind trading.
#
#   yes   means the dialog is dismissed as though the user had
# 	  clicked the 'Ok' button: this means that you accept
# 	  the risk and want the order to be submitted.
#
#   no    means the dialog remains on display and must be
#         handled by the user.

AllowBlindTrading=no


# Save Settings on a Schedule
# ---------------------------
#
# You can tell TWS to automatically save its settings on a schedule
# of your choosing. You can specify one or more specific times,
# like this:
#
# SaveTwsSettingsAt=HH:MM [ HH:MM]...
#
# for example:
# SaveTwsSettingsAt=08:00   12:30 17:30
#
# Or you can specify an interval at which settings are to be saved,
# optionally starting at a specific time and continuing until another
# time, like this:
#
#SaveTwsSettingsAt=Every n [{mins | hours}] [hh:mm] [hh:mm]
#
# where the first hh:mm is the start time and the second is the end
# time. If you don't specify the end time, settings are saved regularly
# from the start time till midnight. If you don't specify the start time.
# settings are saved regularly all day, beginning at 00:00. Note that
# settings will always be saved at the end time, even if that is not
# exactly one interval later than the previous time. If neither 'mins'
# nor 'hours' is specified, 'mins' is assumed. Examples:
#
# To save every 30 minutes all day starting at 00:00
#SaveTwsSettingsAt=Every 30
#SaveTwsSettingsAt=Every 30 mins
#
# To save every hour starting at 08:00 and ending at midnight
#SaveTwsSettingsAt=Every 1 hours 08:00
#SaveTwsSettingsAt=Every 1 hours 08:00 00:00
#
# To save every 90 minutes starting at 08:00 up to and including 17:43
#SaveTwsSettingsAt=Every 90 08:00 17:43

SaveTwsSettingsAt=${SAVE_TWS_SETTINGS}


# Confirm Crypto Currency Orders Automatically
# --------------------------------------------
#
# When you place an order for a cryptocurrency contract, a dialog is displayed
# asking you to confirm that you want to place the order, and notifying you
# that you are placing an order to trade cryptocurrency with Paxos, a New York
# limited trust company, and not at Interactive Brokers.
#
#   transmit    means that the order will be placed automatically, and the
#               dialog will then be closed
#
#   cancel      means that the order will not be placed, and the dialog will
#               then be closed
#
#   manual      means that IBC will take no action and the user must deal
#               with the dialog

ConfirmCryptoCurrencyOrders=transmit



# =============================================================================
# 7.   Settings Specific to Indian Versions of TWS
# =============================================================================

# Indian versions of TWS may display a password expiry
# notification dialog and a NSE Compliance dialog. These can be
# dismissed by setting the following to yes. By default the
# password expiry notice is not dismissed, but the NSE Compliance
# notice is dismissed.

# Warning: setting DismissPasswordExpiryWarning=yes will mean
# you will not be notified when your password is about to expire.
# You must then take other measures to ensure that your password
# is changed within the expiry period, otherwise IBC will
# not be able to login successfully.

DismissPasswordExpiryWarning=no
DismissNSEComplianceNotice=yes



# =============================================================================
# 8.   IBC Command Server Settings
# =============================================================================

# Do NOT CHANGE THE FOLLOWING SETTINGS unless you
# intend to issue commands to IBC (for example
# using telnet). Note that these settings have nothing to
# do with running programs that use the TWS API.

# Command Server Port Number
# --------------------------
#
# The port number that IBC listens on for commands
# such as "STOP". DO NOT set this to the port number
# used for TWS API connections.
#
# The convention is to use 7462 for this port,
# but it must be set to a different value from any other
# IBC instance that might run at the same time.
#
# The default value is 0, which tells IBC not to start
# the command server

#CommandServerPort=7462
CommandServerPort=0


# Permitted Command Sources
# -------------------------
#
# A comma separated list of IP addresses, or host names,
# which are allowed addresses for sending commands to
# IBC.  Commands can always be sent from the
# same host as IBC is running on.

ControlFrom=


# Address for Receiving Commands
# ------------------------------
#
# Specifies the IP address on which the Command Server
# is to listen. For a multi-homed host, this can be used
# to specify that connection requests are only to be
# accepted on the specified address. The default is to
# accept connection requests on all local addresses.

BindAddress=


# Command Prompt
# --------------
#
# The specified string is output by the server when
# the connection is first opened and after the completion
# of each command. This can be useful if sending commands
# using an interactive program such as telnet. The default
# is that no prompt is output.
# For example:
#
# CommandPrompt=>

CommandPrompt=


# Suppress Command Server Info Messages
# -------------------------------------
#
# Some commands can return intermediate information about
# their progress. This setting controls whether such
# information is sent. The default is that such information
# is not sent.

SuppressInfoMessages=yes



# =============================================================================
# 9.   Diagnostic Settings
# =============================================================================
#
# IBC can log information about the structure of windows
# displayed by TWS. This information is useful when adding
# new features to IBC or when behaviour is not as expected.
#
# The logged information shows the hierarchical organisation
# of all the components of the window, and includes the
# current values of text boxes and labels.
#
# Note that this structure logging has a small performance
# impact, and depending on the settings can cause the logfile
# size to be significantly increased. It is therefore
# recommended that the LogStructureWhen setting be set to
# 'never' (the default) unless there is a specific reason
# that this information is needed.


# Scope of Structure Logging
# --------------------------
#
# The LogStructureScope setting indicates which windows are
# eligible for structure logging:
#
#    - (default value) if set to 'known', only windows that
#      IBC recognizes are eligible - these are windows that
#      IBC has some interest in monitoring, usually to take
#      some action on the user's behalf;
#
#    - if set to 'unknown', only windows that IBC does not
#      recognize are eligible. Most windows displayed by
#      TWS fall into this category;
#
#    - if set to 'untitled', only windows that IBC does not
#      recognize and that have no title are eligible. These
#      are usually message boxes or similar small windows,
#
#    - if set to 'all', then every window displayed by TWS
#      is eligible.
#

LogStructureScope=known


# When to Log Window Structure
# ----------------------------
#
# The LogStructureWhen setting specifies the circumstances
# when eligible TWS windows have their structure logged:
#
#     - if set to 'open' or 'yes' or 'true', IBC logs the
#       structure of an eligible window the first time it
#       is encountered;
#
#     - if set to 'openclose', the structure is logged every
#       time an eligible window is opened or closed;
#
#    - if set to 'activate', the structure is logged every
#      time an eligible window is made active;
#
#    - (default value) if set to 'never' or 'no' or 'false',
#      structure information is never logged.
#

LogStructureWhen=never


# DEPRECATED SETTING
# ------------------
#
# LogComponents - THIS SETTING WILL BE REMOVED IN A FUTURE
# RELEASE
#
# If LogComponents is set to any value, this is equivalent
# to setting LogStructureWhen to that same value and
# LogStructureScope to 'all': the actual values of those
# settings are ignored. The default is that the values
# of LogStructureScope and LogStructureWhen are honoured.

#LogComponents=


==== ./ib-gateway-docker/latest/config/ibgateway/jts.ini.tmpl ====

[IBGateway]
WriteDebug=false
TrustedIPs=127.0.0.1
ApiOnly=true

[Logon]
Locale=en
TimeZone=${TIME_ZONE}
displayedproxymsg=1
UseSSL=true
s3store=true

[Communication]


==== ./ib-gateway-docker/.pre-commit-config.yaml ====

# See https://pre-commit.com for more information
# See https://pre-commit.com/hooks.html for more hooks
repos:
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.5.0
    hooks:
      - id: trailing-whitespace
      - id: end-of-file-fixer
      - id: check-yaml
      - id: check-added-large-files
      - id: check-shebang-scripts-are-executable
      - id: check-executables-have-shebangs
  - repo: https://github.com/jumanjihouse/pre-commit-hooks
    rev: 3.0.0
    hooks:
      - id: shellcheck
      - id: shfmt
#  - repo: https://github.com/hadolint/hadolint
#    rev: v2.12.0
#    hooks:
#      - id: hadolint
  - repo: https://github.com/igorshubovych/markdownlint-cli
    rev: v0.37.0
    hooks:
      - id: markdownlint
  - repo: https://github.com/wemake-services/dotenv-linter
    rev: 0.4.0  # Use the ref you want to point at
    hooks:
      - id: dotenv-linter


==== ./ib-gateway-docker/.hadolint.yaml ====

ignored:
  - DL3008
  - SC2028
  - DL3003


==== ./ib-gateway-docker/update.sh ====

#!/usr/bin/env bash
set -Eeuo pipefail

cd "$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")"

if [ $# -ne 2 ]; then
	echo "Usage: ./update.sh <channel> <version>"
	exit 1
fi

channel=$1
version=$2

if [ "$channel" != "stable" ] && [ "$channel" != "latest" ]; then
	echo "The channel must be 'stable' or 'latest'"
	exit 1
fi

echo ".> Setting channle: $channel and version: $version for ibgateway"
cp -r image-files/. "$channel/."

# Dockerfile
rm -f "$channel/Dockerfile"
# shellcheck disable=SC2016
VERSION="$version" CHANNEL="$channel" envsubst '$VERSION,$CHANNEL' <"Dockerfile.template" >"$channel/Dockerfile"

echo ".> Setting channle: $channel and version: $version for tws"

# Dockerfile tws
rm -f "$channel/Dockerfile.tws"
# shellcheck disable=SC2016
VERSION="$version" CHANNEL="$channel" envsubst '$VERSION,$CHANNEL' <"Dockerfile.tws.template" >"$channel/Dockerfile.tws"

echo ".> Done"


==== ./ib-gateway-docker/.github/dependabot.yml ====

# To get started with Dependabot version updates, you'll need to specify which
# package ecosystems to update and where the package manifests are located.
# Please see the documentation for all configuration options:
# https://docs.github.com/github/administering-a-repository/configuration-options-for-dependency-updates

version: 2
updates:
  - package-ecosystem: "docker"
    directory: "/stable"
    schedule:
      interval: "daily"

  - package-ecosystem: "docker"
    directory: "/latest"
    schedule:
      interval: "daily"

  - package-ecosystem: "github-actions"
    directory: "/"
    schedule:
      interval: "weekly"


==== ./ib-gateway-docker/.github/workflows/detect-releases.yml ====

name: Detect IB Gateway Releases

on:
  schedule:
    - cron: "0 6 * * *"

  workflow_dispatch:

defaults:
  run:
    shell: "bash -Eeuo pipefail -x {0}"

jobs:
  detect-release:
    runs-on: ubuntu-latest
    outputs:
      update: ${{ steps.check-update.outputs.has_update }}
      channel: ${{ matrix.channel }}
    strategy:
      fail-fast: true
      matrix:
        channel: ["stable", "latest"]
    steps:
      - uses: actions/checkout@v4

      - name: Get Latest Version
        id: version
        run: |
          res=$(curl -s https://download2.interactivebrokers.com/installers/tws/${{ matrix.channel }}-standalone/version.json | sed 's/tws${{ matrix.channel }}_callback(//g;s/);//g')
          build_version=$(jq -r '.buildVersion' <<< "$res")
          #build_dateTime=$(jq -r '.buildDateTime' <<< "$res")
          echo "build_version=$build_version" >> $GITHUB_OUTPUT
          #echo "build_dateTime=$build_dateTime" >> $GITHUB_OUTPUT

      - name: Check if there is an update
        id: check-update
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release list > /tmp/ibgateway-releases
          if grep -qF '${{ steps.version.outputs.build_version }}' /tmp/ibgateway-releases
          then
            echo "has_update=false" >> $GITHUB_OUTPUT
          else
            echo "has_update=true" >> $GITHUB_OUTPUT
          fi

      - name: Download
        if: ${{ steps.check-update.outputs.has_update == 'true' }}
        run: |
          download_url='https://download2.interactivebrokers.com/installers/ibgateway/${{ matrix.channel }}-standalone/ibgateway-${{ matrix.channel }}-standalone-linux-x64.sh'
          dest='ibgateway-${{ steps.version.outputs.build_version }}-standalone-linux-x64.sh'
          curl -sSL "$download_url" --output "$dest"
          sha256sum "$dest" > "${dest}.sha256"

      - name: Create release
        if: ${{ steps.check-update.outputs.has_update == 'true' }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create 'ibgateway-${{ matrix.channel }}@${{ steps.version.outputs.build_version }}' \
            -t 'IB Gateway ${{ matrix.channel }} ${{ steps.version.outputs.build_version }}' \
            -n 'IB Gateway ${{ matrix.channel }} ${{ steps.version.outputs.build_version }} release files' \
            ibgateway-*

      - name: Update ${{ matrix.channel }}
        if: ${{ steps.check-update.outputs.has_update == 'true' }}
        run: ./update.sh ${{ matrix.channel }} ${{ steps.version.outputs.build_version }}

      - name: Update README
        if: ${{ steps.check-update.outputs.has_update == 'true' }}
        run: |
          # get stable and latest versions
          export _stable_dockerfile='stable/Dockerfile'
          export _latest_dockerfile='latest/Dockerfile'
          if [ ${{ matrix.channel }} = 'latest' ]; then
            # set latest
            export LATEST_VERSION=${{ steps.version.outputs.build_version }}
            export LATEST_MINOR=$(echo $LATEST_VERSION | cut -d '.' -f1,2)

            # set stable
            export STABLE_VERSION=$(grep 'ENV IB_GATEWAY_VERSION=' $_stable_dockerfile | head -1 | cut -d '=' -f2)
            export STABLE_MINOR=$(echo $STABLE_VERSION| cut -d '.' -f1,2)

          elif [ ${{ matrix.channel }} = 'stable' ]; then
            # set STABLE
            export STABLE_VERSION=${{ steps.version.outputs.build_version }}
            export STABLE_MINOR=$(echo $STABLE_VERSION | cut -d '.' -f1,2)
            # set LATEST
            export LATEST_VERSION=$(grep 'ENV IB_GATEWAY_VERSION=' $_latest_dockerfile | head -1 | cut -d '=' -f2)
            export LATEST_MINOR=$(echo $STABLE_VERSION| cut -d '.' -f1,2)
          else
            echo "invalid channel: ${{ matrix.channel }}"
            exit 1
          fi
          # IBC
          export IBC_VERSION="$(grep 'ENV IBC_VERSION' Dockerfile.template|cut -d '=' -f 2)"
          # show in log
          echo "$LATEST_VERSION,$LATEST_MINOR,$STABLE_VERSION,$STABLE_MINOR,$IBC_VERSION"
          # replace variables
          envsubst '$LATEST_VERSION,$LATEST_MINOR,$STABLE_VERSION,$STABLE_MINOR,$IBC_VERSION' < template_README.md > README.md

      - name: Create PR
        if: ${{ steps.check-update.outputs.has_update == 'true' }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          t_branch='update-${{ matrix.channel }}-to-${{ steps.version.outputs.build_version }}'
          git config user.name github-actions
          git config user.email github-actions@github.com
          git pull
          git checkout -b "$t_branch" origin/master
          git add '${{ matrix.channel }}' README.md
          git commit -m 'Update `${{ matrix.channel }}` to `${{ steps.version.outputs.build_version }}`'
          git push --set-upstream origin "$t_branch"

          gh pr create --base master --fill


  build:
    name: Call build workflow
    needs: detect-release
    if: needs.detect-release.outputs.update == 'true'
    uses: gnzsnz/ib-gateway-docker/.github/workflows/build.yml@master
    with:
        channel: ${{ needs.detect-release.outputs.channel }}


==== ./ib-gateway-docker/.github/workflows/detect-ibc-release.yml ====

name: Detect IBC Releases

on:
  schedule:
    - cron: "0 6 * * *"

  workflow_dispatch:

defaults:
  run:
    shell: "bash -Eeuo pipefail -x {0}"

env:
  IBC_REPO: https://github.com/IbcAlpha/IBC.git
  BRANCH_PREFIX: IBC-update
jobs:
  detect-release:
    name: Detect Release
    runs-on: ubuntu-latest
    outputs:
      update: ${{ steps.verify_latest.outputs.update }}
    strategy:
      fail-fast: true

    steps:
      - uses: actions/checkout@v4

      - name: Get Current Version
        id: version
        run: |
          CURRENT_IBC="$(grep 'ENV IBC_VERSION' Dockerfile.template|cut -d '=' -f 2)"
          echo "CURRENT_IBC=$CURRENT_IBC" >> $GITHUB_OUTPUT

      - name: Get IBC latest version
        id: ibc_version
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          IBC_LATEST="$(gh release list -R ${{ env.IBC_REPO }} --exclude-drafts --exclude-pre-releases |grep 'Latest'|cut -f1)"
          if [ -n ${IBC_LATEST} ]
          then
            echo "IBC_LATEST=$IBC_LATEST" >> $GITHUB_OUTPUT
          else
          echo "IBC_LATEST=" >> $GITHUB_OUTPUT
          fi

      - name: Verify latest version
        id: verify_latest
        run: |
          current=${{ steps.version.outputs.CURRENT_IBC }}
          latest=${{ steps.ibc_version.outputs.IBC_LATEST }}

          if [[ "$current" = "$latest" ]]; then
            update="false"
          else
            update="true"
          fi

          echo "update=$update" >> $GITHUB_OUTPUT

      - name: Check if branch already exists
        id: verify_branch
        if: ${{ steps.verify_latest.outputs.update == 'true' }}
        run: |
          latest=${{ steps.ibc_version.outputs.IBC_LATEST }}
          prefix=${{ env.BRANCH_PREFIX }}
          search=${prefix}-${latest}

          if [ -n $(git branch --list | grep "$search") ]; then
            echo "BRANCH_EXISTS=true" >> $GITHUB_OUTPUT
          else
            echo "BRANCH_EXISTS=false" >> $GITHUB_OUTPUT
          fi

      - name: Create Pull Request
        if: ${{ steps.verify_branch.outputs.update == 'false' }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          ver=${{ steps.version.outputs.CURRENT_IBC }}
          latest=${{ steps.ibc_version.outputs.IBC_LATEST}}
          prefix=${{ env.BRANCH_PREFIX }}
          branch="${prefix}-${latest}"
          git config user.name github-actions
          git config user.email github-actions@github.com
          git pull
          git checkout -b "$branch" origin/master

          # update Dockerfile.template, but don't run update.sh
          # next ib gateway release will run update.sh
          sed -i "s/IBC_VERSION=${ver}/IBC_VERSION=${latest}/g" Dockerfile.template

          git add Dockerfile.template
          git commit -m "Update IBC from ${ver} to ${latest}"
          git push --set-upstream origin "$branch"

          gh pr create --base master --fill


  build:
    name: Call build workflow
    needs: detect-release
    if: needs.detect-release.outputs.update == 'true'
    strategy:
      matrix:
        channel: ['stable', 'latest']
    uses: gnzsnz/ib-gateway-docker/.github/workflows/build.yml@master
    with:
        channel: ${{ matrix.channel }}


==== ./ib-gateway-docker/.github/workflows/build.yml ====

name: Docker Image Build - ibgateway/TWS build

on:
  workflow_call:
    inputs:
      channel:
        required: true
        type: string

env:
  CHANNEL: ${{ inputs.channel }}

jobs:
  build:
    name: Build ibgateway & TWS

    runs-on: ubuntu-latest
    continue-on-error: true

    steps:

      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      ###############################################################
      #   Build ibgateway
      ###############################################################
      - name: Docker metadata ibgateway
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ghcr.io/gnzsnz/ib-gateway
            gnzsnz/ib-gateway
          flavor: |
            latest=false
          tags: |
            type=match,pattern=v(\d+.\d+),group=1
            type=match,pattern=v(\d+.\d+.\w+),group=1
            type=match,pattern=v(\d+.\d+.\w+)+\-(stable|latest),group=2

      - name: Build ibgateway Docker image
        uses: docker/build-push-action@v5
        with:
          push: false
          load: true
          context: ./${{ env.CHANNEL }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      ###############################################################
      #   Build tws
      ###############################################################
      - name: Docker metadata tws
        id: meta-tws
        uses: docker/metadata-action@v5
        with:
          images: |
            ghcr.io/gnzsnz/tws-rdesktop
            gnzsnz/tws-rdesktop
          flavor: |
            latest=false
          tags: |
            type=match,pattern=v(\d+.\d+),group=1
            type=match,pattern=v(\d+.\d+.\w+),group=1
            type=match,pattern=v(\d+.\d+.\w+)+\-(stable|latest),group=2

      - name: Build TWS Docker image
        uses: docker/build-push-action@v5
        with:
          push: false
          load: true
          context: ${{ env.CHANNEL }}
          file: ${{ env.CHANNEL }}/Dockerfile.tws
          cache-from: type=gha
          cache-to: type=gha,mode=max
          tags: ${{ steps.meta-tws.outputs.tags }}
          labels: ${{ steps.meta-tws.outputs.labels }}


==== ./ib-gateway-docker/.github/workflows/publish.yml ====

name: "Publish Docker"

on:
  push:
    tags:
      - 'v*'

jobs:
  publish-docker:
    name: Publish Docker Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
          lfs: true

      - name: Extract release channel
        id: channel
        run: |
          channel=$(cut -d - -f 2 <<< "${{ github.ref_name }}")
          echo "channel=$channel" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      ###############################################################
      #   Login container registry
      ###############################################################
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      ###############################################################
      #   Build ibgateway
      ###############################################################

      - name: Docker meta ibgateway
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ghcr.io/gnzsnz/ib-gateway
            gnzsnz/ib-gateway
          flavor: |
            latest=false
          tags: |
            type=match,pattern=v(\d+.\d+),group=1
            type=match,pattern=v(\d+.\d+.\w+),group=1
            type=match,pattern=v(\d+.\d+.\w+)+\-(stable|latest),group=2

      - name: Build and push ibgateway
        uses: docker/build-push-action@v5
        with:
          context: ${{ steps.channel.outputs.channel }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      ###############################################################
      #   Build tws
      ###############################################################

      - name: Docker meta TWS
        id: meta-tws
        uses: docker/metadata-action@v5
        with:
          images: |
            ghcr.io/gnzsnz/tws-rdesktop
            gnzsnz/tws-rdesktop
          flavor: |
            latest=false
          tags: |
            type=match,pattern=v(\d+.\d+),group=1
            type=match,pattern=v(\d+.\d+.\w+),group=1
            type=match,pattern=v(\d+.\d+.\w+)+\-(stable|latest),group=2

      - name: Build and push TWS
        uses: docker/build-push-action@v5
        with:
            context: ${{ steps.channel.outputs.channel }}
            file: ${{ steps.channel.outputs.channel }}/Dockerfile.tws
            cache-from: type=gha
            cache-to: type=gha,mode=max
            push: true
            tags: ${{ steps.meta-tws.outputs.tags }}
            labels: ${{ steps.meta-tws.outputs.labels }}


==== ./ib-gateway-docker/.github/workflows/on-push-n-pr.yml ====

name: Docker Image CI

on:
  workflow_dispatch:
  push:
    branches: ['*', '!update-*-to-*', '!IBC-update*']
    tags-ignore:
      - 'v*'
  pull_request:
    branches: ['master', '!update-*-to-*', '!IBC-update*']

jobs:
  build:
      name: Build image
      strategy:
        matrix:
          channel: ['stable', 'latest']
      uses: gnzsnz/ib-gateway-docker/.github/workflows/build.yml@master
      with:
          channel: ${{ matrix.channel }}


==== ./ib-gateway-docker/Dockerfile.tws.template ====

##############################################################################
# Setup Stage: install apps
#
# This is a dedicated stage used as source for needed files.
#
##############################################################################
ARG IB_VERSION=$VERSION
FROM ghcr.io/gnzsnz/ib-gateway:${IB_VERSION} as setup

WORKDIR /

##############################################################################
# Build Stage: build production image
##############################################################################

FROM lscr.io/linuxserver/rdesktop:ubuntu-xfce

ENV IB_GATEWAY_VERSION=$VERSION
ENV IB_GATEWAY_RELEASE_CHANNEL=$CHANNEL
ENV IBC_VERSION=3.18.0

# IB Gateway user constants
# IBC env vars
ENV TWS_MAJOR_VRSN=${IB_GATEWAY_VERSION}
ENV TWS_PATH=/opt/ibkr
ENV TWS_INI=jts.ini
ENV TWS_INI_TMPL=${TWS_INI}.tmpl
ENV IBC_PATH=/opt/ibc
ENV IBC_INI=${IBC_PATH}/config.ini
ENV IBC_INI_TMPL=${IBC_INI}.tmpl
ENV SCRIPT_PATH=/defaults
ENV GATEWAY_OR_TWS=tws
ENV NO_AT_BRIDGE=1

ARG DEBIAN_FRONTEND=noninteractive

RUN \
  apt-get update -y && \
  apt-get upgrade -y && \
  apt-get install --no-install-recommends --yes socat sshpass gettext-base \
    libnspr4 libnss3 libcrypto++8 xdg-utils xfce4-cpugraph-plugin \
    xfce4-netload-plugin xfce4-taskmanager xfce4-xkb-plugin xfce4-notes \
    gvfs gvfs-backends gvfs-fuse && \
  apt-get clean && \
  rm -rf /var/lib/apt/lists/* # end

# Copy files
COPY --from=setup /usr/local/i4j_jres/ /usr/local/i4j_jres
COPY --chown=abc:abc --from=setup /home/ibgateway/Jts ${TWS_PATH}
COPY --chown=abc:abc --from=setup /home/ibgateway/ibc ${IBC_PATH}
COPY ./tws-scripts/start_session.sh /custom-services.d/start_session.sh
COPY ./tws-scripts/run_tws.sh ${SCRIPT_PATH}
COPY ./scripts/* ${SCRIPT_PATH}

# labels
LABEL org.opencontainers.image.source=https://github.com/gnzsnz/ib-gateway-docker
LABEL org.opencontainers.image.url=https://github.com/gnzsnz/ib-gateway-docker/pkgs/container/tws-rdesktop
LABEL org.opencontainers.image.description="Docker image with XFCE, TWS & IBC"
LABEL org.opencontainers.image.licenses="Apache License Version 2.0"
LABEL org.opencontainers.image.version=${IB_GATEWAY_VERSION}-${IB_GATEWAY_RELEASE_CHANNEL}


==== ./ib-gateway-docker/docker-compose.yml ====

version: "3.4"

name: algo-trader
services:
  ib-gateway:
    restart: always
    build:
      context: ./latest
      platforms:
        - "linux/arm64"
      tags:
      - "gnzsnz/ib-gateway:latest"
        #- "ghcr.io/gnzsnz/ib-gateway:latest"
    #image: ghcr.io/gnzsnz/ib-gateway:latest
    image: gnzsnz/ib-gateway:latest
    environment:
      TWS_USERID: ${TWS_USERID}
      TWS_PASSWORD: ${TWS_PASSWORD}
      TRADING_MODE: ${TRADING_MODE:-paper}
      TWS_USERID_PAPER: ${TWS_USERID_PAPER:-}
      TWS_PASSWORD_PAPER: ${TWS_PASSWORD_PAPER:-}
      TWS_SETTINGS_PATH: ${TWS_SETTINGS_PATH:-}
      READ_ONLY_API: ${READ_ONLY_API:-}
      VNC_SERVER_PASSWORD: ${VNC_SERVER_PASSWORD:-}
      TWOFA_TIMEOUT_ACTION: ${TWOFA_TIMEOUT_ACTION:-exit}
      BYPASS_WARNING: ${BYPASS_WARNING:-}
      AUTO_RESTART_TIME: ${AUTO_RESTART_TIME:-}
      AUTO_LOGOFF_TIME: ${AUTO_LOGOFF_TIME:-}
      SAVE_TWS_SETTINGS: ${SAVE_TWS_SETTINGS:-}
      RELOGIN_AFTER_TWOFA_TIMEOUT: ${RELOGIN_AFTER_TWOFA_TIMEOUT:-no}
      TWOFA_EXIT_INTERVAL: ${TWOFA_EXIT_INTERVAL:-60}
      TIME_ZONE: ${TIME_ZONE:-Etc/UTC}
      TZ: ${TIME_ZONE:-Etc/UTC}
      CUSTOM_CONFIG: ${CUSTOM_CONFIG:-NO}
      JAVA_HEAP_SIZE: ${JAVA_HEAP_SIZE:-}
      SSH_TUNNEL: ${SSH_TUNNEL:-}
      SSH_OPTIONS: ${SSH_OPTIONS:-}
      SSH_ALIVE_INTERVAL: ${SSH_ALIVE_INTERVAL:-}
      SSH_ALIVE_COUNT: ${SSH_ALIVE_COUNT:-}
      SSH_PASSPHRASE: ${SSH_PASSPHRASE:-}
      SSH_REMOTE_PORT: ${SSH_REMOTE_PORT:-}
      SSH_USER_TUNNEL: ${SSH_USER_TUNNEL:-}
      SSH_RESTART: ${SSH_RESTART:-}
      SSH_VNC_PORT: ${SSH_VNC_PORT:-}
#    volumes:
#      - ${PWD}/jts.ini:/home/ibgateway/Jts/jts.ini
#      - ${PWD}/config.ini:/home/ibgateway/ibc/config.ini
#      - ${PWD}/tws_settings/:${TWS_SETTINGS_PATH:-/home/ibgateway/Jts}
#      - ${PWD}/ssh/:/home/ibgateway/.ssh
    ports:
      - "127.0.0.1:4001:4003"
      - "127.0.0.1:4002:4004"
      #- "127.0.0.1:5900:5900"
      - "5900:5900"


==== ./ib-gateway-docker/image-files/tws-scripts/run_tws.sh ====

#!/bin/bash
# shellcheck shell=bash
# shellcheck disable=SC1091,SC2317,SC2034

echo "*************************************************************************"
echo ".> Starting IBC/TWS"
echo "*************************************************************************"
# source common functions
source "${SCRIPT_PATH}/common.sh"

disable_agents() {
	## disable ssh and gpg agent
	# https://docs.xfce.org/xfce/xfce4-session/advanced
	if [ ! -f /config/.config/disable_agents ]; then
		echo ".> Disabling ssh-agent and gpg-agent"
		# disable xfce
		xfconf-query -c xfce4-session -p /startup/ssh-agent/enabled -n -t bool -s false
		xfconf-query -c xfce4-session -p /startup/gpg-agent/enabled -n -t bool -s false
		# kill ssh-agent and gpg-agent
		pkill -x ssh-agent
		pkill -x gpg-agent
		touch /config/.config/disable_agents
	else
		echo ".> Found '/config/.config/disable_agents' agents already disabled"
	fi
}

disable_compositing() {
	# disable compositing
	# https://github.com/gnzsnz/ib-gateway-docker/issues/55
	echo ".> Disabling xfce compositing"
	xfconf-query --channel=xfwm4 --property=/general/use_compositing --type=bool --set=false --create
}

start_IBC() {
	echo ".> Starting IBC in ${TRADING_MODE} mode, with params:"
	echo ".>		Version: ${TWS_MAJOR_VRSN}"
	echo ".>		program: ${IBC_COMMAND:-gateway}"
	echo ".>		tws-path: ${TWS_PATH}"
	echo ".>		ibc-path: ${IBC_PATH}"
	echo ".>		ibc-init: ${IBC_INI}"
	echo ".>		tws-settings-path: ${TWS_SETTINGS_PATH:-$TWS_PATH}"
	echo ".>		on2fatimeout: ${TWOFA_TIMEOUT_ACTION}"
	# start IBC
	"${IBC_PATH}/scripts/ibcstart.sh" "${TWS_MAJOR_VRSN}" \
		"--tws-path=${TWS_PATH}" \
		"--ibc-path=${IBC_PATH}" "--ibc-ini=${IBC_INI}" \
		"--on2fatimeout=${TWOFA_TIMEOUT_ACTION}" \
		"--tws-settings-path=${TWS_SETTINGS_PATH:-}" &
	_p="$!"
	pid+=("$_p")
	export pid
	echo "$_p" >"/tmp/pid_${TRADING_MODE}"
}

start_process() {
	# set API and socat ports
	set_ports
	# apply settings
	apply_settings
	# forward ports, socat/ssh
	port_forwarding

	start_IBC
}

###############################################################################
#####		Common Start
###############################################################################
# set display
export DISPLAY=:10

# user id
echo ".> Running as user"
id
# disable agents
disable_agents
# disable compositing
disable_compositing
# SSH
setup_ssh
# Java heap size
set_java_heap

###############################################################################
#####		Paper, Live or both start process
###############################################################################
if [ "$TRADING_MODE" == "both" ] || [ "$DUAL_MODE" == "yes" ]; then
	# start live and paper
	DUAL_MODE=yes
	export DUAL_MODE
	# start live first
	TRADING_MODE=live
	# add _live subfix
	_IBC_INI="${IBC_INI}"
	export _IBC_INI
	IBC_INI="${_IBC_INI}_${TRADING_MODE}"
	if [ -n "$TWS_SETTINGS_PATH" ]; then
		_TWS_SETTINGS_PATH="${TWS_SETTINGS_PATH}"
		export _TWS_SETTINGS_PATH
		TWS_SETTINGS_PATH="${_TWS_SETTINGS_PATH}_${TRADING_MODE}"
	else
		# no TWS settings
		_TWS_SETTINGS_PATH="${TWS_PATH}"
		export _TWS_SETTINGS_PATH
		TWS_SETTINGS_PATH="${_TWS_SETTINGS_PATH}_${TRADING_MODE}"
	fi
fi

start_process

if [ "$DUAL_MODE" == "yes" ]; then
	# running dual mode, start paper
	TRADING_MODE=paper
	TWS_USERID="${TWS_USERID_PAPER}"
	export TWS_USERID
	TWS_PASSWORD="${TWS_PASSWORD_PAPER}"
	export TWS_PASSWORD
	# disable duplicate ssh for vnc/rdp
	SSH_VNC_PORT=
	export SSH_VNC_PORT
	SSH_RDP_PORT=
	export SSH_RDP_PORT
	# in dual mode, ssh remote always == api port
	SSH_REMOTE_PORT=
	export SSH_REMOTE_PORT
	#
	IBC_INI="${_IBC_INI}_${TRADING_MODE}"
	TWS_SETTINGS_PATH="${_TWS_SETTINGS_PATH}_${TRADING_MODE}"

	sleep 15
	start_process
fi

wait "${pid[@]}"
_wait="$?"
echo ".> ************************** End run_tws.sh ******************************** <."
exit "$_wait"


==== ./ib-gateway-docker/image-files/tws-scripts/start_session.sh ====

#!/usr/bin/with-contenv bash
# shellcheck shell=bash

echo "*************************************************************************"
echo ".> Launching IBC/TWS service"
echo "*************************************************************************"
# shellcheck disable=SC1091
# source common functions
source "${SCRIPT_PATH}/common.sh"

# set display
export DISPLAY=:10

# set user pass
_PASS=${PASSWD:-abc}
echo ".> Setting user password"
echo "abc:$_PASS" | chpasswd
id

if [ -n "${TZ}" ]; then
	echo ".> Setting timezone to: ${TZ}"
	echo "${TZ}" >/etc/timezone
fi

# open xfce session
echo ".> Openning Xrdp session"
echo "${_PASS}" | xrdp-sesrun -s 127.0.0.1 -F 0 abc

# setting permissions
echo ".> Setting permissions for ${TWS_PATH} and ${IBC_PATH}"
chown abc:abc -R /opt "${TWS_PATH}" "${IBC_PATH}"

sudo -EH -u abc "${SCRIPT_PATH}/run_tws.sh"


==== ./ib-gateway-docker/image-files/scripts/run_ssh.sh ====

#!/bin/bash

_OPTIONS="$SSH_ALL_OPTIONS"
_LOCAL_PORT="$API_PORT"
_REMOTE_PORT="$SSH_REMOTE_PORT"
_SCREEN="$SSH_SCREEN"
_USER_TUNNEL="$SSH_USER_TUNNEL"
_RESTART="$SSH_RESTART"

while true; do
	echo ".> Starting ssh tunnel with ssh sock: $SSH_AUTH_SOCK"
	bash -c "ssh ${_OPTIONS} -TNR 127.0.0.1:${_LOCAL_PORT}:localhost:${_REMOTE_PORT} ${_SCREEN:-} ${_USER_TUNNEL}"
	sleep "${_RESTART:-5}"
done


==== ./ib-gateway-docker/image-files/scripts/run.sh ====

#!/bin/bash
# shellcheck disable=SC2317
# Don't warn about unreachable commands in this file

echo "*************************************************************************"
echo ".> Starting IBC/IB gateway"
echo "*************************************************************************"

# shellcheck disable=SC1091
source "${SCRIPT_PATH}/common.sh"

stop_ibc() {
	echo ".> 😘 Received SIGINT or SIGTERM. Shutting down IB Gateway."

	#
	if [ -n "$VNC_SERVER_PASSWORD" ]; then
		echo ".> Stopping x11vnc."
		pkill x11vnc
	fi
	#
	echo ".> Stopping Xvfb."
	pkill Xvfb
	#
	if [ -n "$SSH_TUNNEL" ]; then
		echo ".> Stopping ssh."
		pkill run_ssh.sh
		pkill ssh
		echo ".> Stopping socat."
		pkill run_socat.sh
		pkill socat
	else
		echo ".> Stopping socat."
		pkill run_socat.sh
		pkill socat
	fi
	# Set TERM
	echo ".> Stopping IBC."
	kill -SIGTERM "${pid[@]}"
	# Wait for exit
	wait "${pid[@]}"
	# All done.
	echo ".> Done... $?"
}

start_xvfb() {
	# start Xvfb
	echo ".> Starting Xvfb server"
	DISPLAY=:1
	export DISPLAY
	rm -f /tmp/.X1-lock
	Xvfb $DISPLAY -ac -screen 0 1024x768x16 &
}

start_vnc() {
	# start VNC server
	if [ -n "$VNC_SERVER_PASSWORD" ]; then
		echo ".> Starting VNC server"
		x11vnc -ncache_cr -display :1 -forever -shared -bg -noipv6 -passwd "$VNC_SERVER_PASSWORD" &
	else
		echo ".> VNC server disabled"
	fi
}

start_IBC() {
	echo ".> Starting IBC in ${TRADING_MODE} mode, with params:"
	echo ".>		Version: ${TWS_MAJOR_VRSN}"
	echo ".>		program: ${IBC_COMMAND:-gateway}"
	echo ".>		tws-path: ${TWS_PATH}"
	echo ".>		ibc-path: ${IBC_PATH}"
	echo ".>		ibc-init: ${IBC_INI}"
	echo ".>		tws-settings-path: ${TWS_SETTINGS_PATH:-$TWS_PATH}"
	echo ".>		on2fatimeout: ${TWOFA_TIMEOUT_ACTION}"
	# start IBC -g for gateway
	"${IBC_PATH}/scripts/ibcstart.sh" "${TWS_MAJOR_VRSN}" -g \
		"--tws-path=${TWS_PATH}" \
		"--ibc-path=${IBC_PATH}" "--ibc-ini=${IBC_INI}" \
		"--on2fatimeout=${TWOFA_TIMEOUT_ACTION}" \
		"--tws-settings-path=${TWS_SETTINGS_PATH:-}" &
	_p="$!"
	pid+=("$_p")
	export pid
	echo "$_p" >"/tmp/pid_${TRADING_MODE}"
}

start_process() {
	# set API and socat ports
	set_ports
	# apply settings
	apply_settings
	# forward ports, socat/ssh
	port_forwarding

	start_IBC
}

###############################################################################
#####		Common Start
###############################################################################
# start Xvfb
start_xvfb

# setup SSH Tunnel
setup_ssh

# Java heap size
set_java_heap

# start VNC server
start_vnc

###############################################################################
#####		Paper, Live or both start process
###############################################################################

if [ "$TRADING_MODE" == "both" ] || [ "$DUAL_MODE" == "yes" ]; then
	# start live and paper
	DUAL_MODE=yes
	export DUAL_MODE
	# start live first
	TRADING_MODE=live
	# add _live subfix
	_IBC_INI="${IBC_INI}"
	export _IBC_INI
	IBC_INI="${_IBC_INI}_${TRADING_MODE}"
	if [ -n "$TWS_SETTINGS_PATH" ]; then
		_TWS_SETTINGS_PATH="${TWS_SETTINGS_PATH}"
		export _TWS_SETTINGS_PATH
		TWS_SETTINGS_PATH="${_TWS_SETTINGS_PATH}_${TRADING_MODE}"
	else
		# no TWS settings
		_TWS_SETTINGS_PATH="${TWS_PATH}"
		export _TWS_SETTINGS_PATH
		TWS_SETTINGS_PATH="${_TWS_SETTINGS_PATH}_${TRADING_MODE}"
	fi
fi

start_process

if [ "$DUAL_MODE" == "yes" ]; then
	# running dual mode, start paper
	TRADING_MODE=paper
	TWS_USERID="${TWS_USERID_PAPER}"
	export TWS_USERID
	TWS_PASSWORD="${TWS_PASSWORD_PAPER}"
	export TWS_PASSWORD
	# disable duplicate ssh for vnc/rdp
	SSH_VNC_PORT=
	export SSH_VNC_PORT
	# in dual mode, ssh remote always == api port
	SSH_REMOTE_PORT=
	export SSH_REMOTE_PORT
	#
	IBC_INI="${_IBC_INI}_${TRADING_MODE}"
	TWS_SETTINGS_PATH="${_TWS_SETTINGS_PATH}_${TRADING_MODE}"

	sleep 15
	start_process
fi

trap stop_ibc SIGINT SIGTERM
wait "${pid[@]}"
exit $?


==== ./ib-gateway-docker/image-files/scripts/run_socat.sh ====

#!/bin/bash

LOCAL_PORT="$API_PORT"
# shellcheck disable=SC2153
PUBLISHED_PORT="$SOCAT_PORT"
_RESTART="$SSH_RESTART"

while true; do
	printf "Forking :::%d onto 0.0.0.0:%d > trading mode %s \n" \
		"${LOCAL_PORT}" "${PUBLISHED_PORT}" "${TRADING_MODE}"
	socat TCP-LISTEN:"${PUBLISHED_PORT}",fork TCP:127.0.0.1:"${LOCAL_PORT}"
	sleep "${_RESTART:-5}"
done


==== ./ib-gateway-docker/image-files/scripts/common.sh ====

#!/bin/bash
# shellcheck disable=SC1091

apply_settings() {
	# apply env variables into IBC and gateway/TWS config files
	if [ "$CUSTOM_CONFIG" != "yes" ]; then
		echo ".> Appling settings to IBC's config.ini"
		# replace env variables
		envsubst <"${IBC_INI_TMPL}" >"${IBC_INI}"

		# where are settings stored
		if [ -n "$TWS_SETTINGS_PATH" ]; then
			echo ".> Settings directory set to: $TWS_SETTINGS_PATH"
			_JTS_PATH=$TWS_SETTINGS_PATH
			if [ ! -d "$TWS_SETTINGS_PATH" ]; then
				# if TWS_SETTINGS_PATH does not exists, create it
				echo ".> Creating directory: $TWS_SETTINGS_PATH"
				mkdir "$TWS_SETTINGS_PATH"
			fi
		else
			echo ".> Settings directory NOT set, defaulting to: $TWS_PATH"
			_JTS_PATH=$TWS_PATH
		fi
		# only if jts.ini does not exists
		if [ ! -f "$_JTS_PATH/$TWS_INI" ]; then
			echo ".> Setting timezone in ${_JTS_PATH}/${TWS_INI}"
			envsubst <"${TWS_PATH}/${TWS_INI_TMPL}" >"${_JTS_PATH}/${TWS_INI}"
		else
			echo ".> File jts.ini already exists, not setting timezone"
		fi
	else
		echo ".> Using CUSTOM_CONFIG, (value:${CUSTOM_CONFIG})"
	fi
}

set_ports() {
	# set ports for API and SOCAT

	# ibgateway ports
	if [ "${GATEWAY_OR_TWS}" = "gateway" ]; then
		if [ "$TRADING_MODE" = "paper" ]; then
			# paper ibgateway ports
			API_PORT=4002
			SOCAT_PORT=4004
			export API_PORT SOCAT_PORT
		elif [ "$TRADING_MODE" = "live" ]; then
			# live ibgateway ports
			API_PORT=4001
			SOCAT_PORT=4003
			export API_PORT SOCAT_PORT
		else
			# invalid option
			echo ".> Invalid TRADING_MODE: $TRADING_MODE"
			exit 1
		fi
	elif [ "${GATEWAY_OR_TWS}" = "tws" ]; then
		if [ "$TRADING_MODE" = "paper" ]; then
			# paper TWS ports
			API_PORT=7497
			SOCAT_PORT=7499
			export API_PORT SOCAT_PORT
		elif [ "$TRADING_MODE" = "live" ]; then
			# live TWS ports
			API_PORT=7496
			SOCAT_PORT=7498
			export API_PORT SOCAT_PORT
		else
			# invalid option
			echo ".> Invalid TRADING_MODE: $TRADING_MODE"
			exit 1
		fi
	fi
	echo ".> API_PORT set to: ${API_PORT}"
	echo ".> SOCAT_PORT set to: ${SOCAT_PORT}"

}

set_java_heap() {
	# set java heap size in vm options
	if [ -n "${JAVA_HEAP_SIZE}" ]; then
		_vmpath="${TWS_PATH}/ibgateway/${IB_GATEWAY_VERSION}"
		_string="s/-Xmx768m/-Xmx${JAVA_HEAP_SIZE}m/g"
		sed -i "${_string}" "${_vmpath}/ibgateway.vmoptions"
		echo ".> Java heap size set to ${JAVA_HEAP_SIZE}m"
	else
		echo ".> Usign default Java heap size 768m."
	fi
}

port_forwarding() {
	echo ".> Starting Port Forwarding."
	# validate API port
	if [ -z "${API_PORT}" ]; then
		echo ".> API_PORT not set, port: ${API_PORT}"
		exit 1
	fi

	if [ "$SSH_TUNNEL" = "yes" ] || [ "$SSH_TUNNEL" = "both" ]; then
		echo ".> Starting SSH Tunnel"
		# start socat of tunnel = both
		if [ "$SSH_TUNNEL" = "both" ]; then
			echo ".> Starting socat"
			start_socat
		fi
		# ssh
		start_ssh
	else
		echo ".> Starting socat"
		start_socat
	fi
}

setup_ssh() {
	# prepare SSH Tunnel
	if [ "$SSH_TUNNEL" = "yes" ] || [ "$SSH_TUNNEL" = "both" ]; then
		echo ".> Setting SSH tunnel"

		_SSH_OPTIONS="-o ServerAliveInterval=${SSH_ALIVE_INTERVAL:-20}"
		_SSH_OPTIONS+=" -o ServerAliveCountMax=${SSH_ALIVE_COUNT:-3}"

		if [ -n "$SSH_OPTIONS" ]; then
			_SSH_OPTIONS+=" $SSH_OPTIONS"
		fi
		SSH_ALL_OPTIONS="$_SSH_OPTIONS"
		export SSH_ALL_OPTIONS
		echo ".> SSH options: $SSH_ALL_OPTIONS"

		if [ -n "$SSH_PASSPHRASE" ]; then
			if ! pgrep ssh-agent >/dev/null; then
				# start agent if it's not already running
				# https://wiki.archlinux.org/title/SSH_keys#SSH_agents
				echo ".> Starting ssh-agent."
				ssh-agent >"${HOME}/.ssh-agent.env"
				source "${HOME}/.ssh-agent.env"
				echo ".> ssh-agent sock: ${SSH_AUTH_SOCK}"
			else
				echo ".> ssh-agent already running"
				if [ -z "${SSH_AUTH_SOCK}" ]; then
					echo ".> Loading agent environment"
					source "${HOME}/.ssh-agent.env"
				fi
				echo ".> ssh-agent sock: ${SSH_AUTH_SOCK}"
			fi

			echo ".> Adding keys to ssh-agent."
			export SSH_ASKPASS_REQUIRE=never
			SSHPASS="${SSH_PASSPHRASE}" sshpass -e -P "passphrase" ssh-add
			echo ".> ssh-agent identities: $(ssh-add -l)"
		fi
	else
		echo ".> SSH tunnel disabled"
	fi
}

start_ssh() {
	if [ -n "$(pgrep -f "127.0.0.1:${API_PORT}:localhost:")" ]; then
		# if this script is already running don't start it
		echo ".> SSH tunnel already active. Not starting a new one"
		return 0
	fi

	if [ -z "$SSH_REMOTE_PORT" ]; then
		# by default remote port is same than API_PORT
		SSH_REMOTE_PORT="$API_PORT"
	fi
	echo ".> SSH_REMOTE_PORT set to :${SSH_REMOTE_PORT}"

	# set vnc ssh tunnel
	if [ "$GATEWAY_OR_TWS" = "gateway" ] && [ -n "$SSH_VNC_PORT" ] && [ -n "$VNC_SERVER_PASSWORD" ]; then
		# set ssh tunnel for vnc
		SSH_SCREEN="-R 127.0.0.1:5900:localhost:$SSH_VNC_PORT"
		echo ".> SSH_VNC_TUNNEL set to :${SSH_SCREEN}"
	elif [ "$GATEWAY_OR_TWS" = "tws" ] && [ -n "$SSH_RDP_PORT" ]; then
		# set ssh tunnel for rdp
		SSH_SCREEN="-R 127.0.0.1:3389:localhost:$SSH_RDP_PORT"
		echo ".> SSH_RDP_TUNNEL set to :${SSH_SCREEN}"
	else
		# no ssh screen
		SSH_SCREEN=
	fi

	export SSH_ALL_OPTIONS SSH_SCREEN SSH_REMOTE_PORT
	# run ssh client
	"${SCRIPT_PATH}/run_ssh.sh" &
}

start_socat() {
	# run socat
	if [ -z "${SOCAT_PORT}" ]; then
		echo ".> SOCAT_PORT not set, port: ${SOCAT_PORT}"
		exit 1
	fi
	if [ -n "$(pgrep -f "fork TCP:127.0.0.1:${API_PORT}")" ]; then
		# if this script is already running don't start it
		echo ".> socat already active. Not starting a new one"
		return 0
	else
		# start socat
		"${SCRIPT_PATH}/run_socat.sh" &
	fi

}


==== ./ib-gateway-docker/image-files/config/ibc/config.ini.tmpl ====

# Note that in the comments in this file, TWS refers to both the Trader
# Workstation and the IB Gateway, unless explicitly stated otherwise.
#
# When referred to below, the default value for a setting is the value
# assumed if either the setting is included but no value is specified, or
# the setting is not included at all.
#
# IBC may also be used to start the FIX CTCI Gateway. All settings
# relating to this have names prefixed with FIX.
#
# The IB API Gateway and the FIX CTCI Gateway share the same code. Which
# gateway actually runs is governed by an option on the initial gateway
# login screen. The FIX setting described under IBC Startup
# Settings below controls this.



# =============================================================================
# 1.   IBC Startup Settings
# =============================================================================


# IBC may be used to start the IB Gateway for the FIX CTCI. This
# setting must be set to 'yes' if you want to run the FIX CTCI gateway. The
# default is 'no'.

FIX=no



# =============================================================================
# 2.   Authentication Settings
# =============================================================================

# TWS and the IB API gateway require a single username and password.
# You may specify the username and password using the following settings:
#
#	IbLoginId
#	IbPassword
#
# Alternatively, you can specify the username and password in the command
# files used to start TWS or the Gateway, but this is not recommended for
# security reasons.
#
# If you don't specify them, you will be prompted for them in the usual
# login dialog when TWS starts (but whatever you have specified will be
# included in the dialog automatically: for example you may specify the
# username but not the password, and then you will be prompted for the
# password via the login dialog). Note that if you specify either
# the username or the password (or both) in the command file, then
# IbLoginId and IbPassword settings defined in this file are ignored.
#
#
# The FIX CTCI gateway requires one username and password for FIX order
# routing, and optionally a separate username and password for market
# data connections. You may specify the usernames and passwords using
# the following settings:
#
#	FIXLoginId
#	FIXPassword
#	IbLoginId	(optional - for market data connections)
#	IbPassword	(optional - for market data connections)
#
# Alternatively you can specify the FIX username and password in the
# command file used to start the FIX CTCI Gateway, but this is not
# recommended for security reasons.
#
# If you don't specify them, you will be prompted for them in the usual
# login dialog when FIX CTCI gateway starts (but whatever you have
# specified will be included in the dialog automatically: for example
# you may specify the usernames but not the passwords, and then you will
# be prompted for the passwords via the login dialog). Note that if you
# specify either the FIX username or the FIX password (or both) on the
# command line, then FIXLoginId and FIXPassword settings defined in this
# file are ignored; he same applies to the market data username and
# password.

# IB API Authentication Settings
# ------------------------------

# Your TWS username:

IbLoginId=${TWS_USERID}


# Your TWS password:

IbPassword=${TWS_PASSWORD}


# FIX CTCI Authentication Settings
# --------------------------------

# Your FIX CTCI username:

FIXLoginId=


# Your FIX CTCI password:

FIXPassword=


# Second Factor Authentication Settings
# -------------------------------------

# If you have enabled more than one second factor authentication
# device, TWS presents a list from which you must select the device
# you want to use for this login. You can use this setting to
# instruct IBC to select a particular item in the list on your
# behalf. Note that you must spell this value exactly as it appears
# in the list. If no value is set, you must manually select the
# relevant list entry.

SecondFactorDevice=


# If you use the IBKR Mobile app for second factor authentication,
# and you fail to complete the process before the time limit imposed
# by IBKR, this setting tells IBC whether to automatically restart
# the login sequence, giving you another opportunity to complete
# second factor authentication.
#
# Permitted values are 'yes' and 'no'.
#
# If this setting is not present or has no value, then the value
# of the deprecated ExitAfterSecondFactorAuthenticationTimeout is
# used instead. If this also has no value, then this setting defaults
# to 'no'.
#
# NB: you must be using IBC v3.14.0 or later to use this setting:
# earlier versions ignore it.

ReloginAfterSecondFactorAuthenticationTimeout=${RELOGIN_AFTER_TWOFA_TIMEOUT}


# This setting is only relevant if
# ReloginAfterSecondFactorAuthenticationTimeout is set to 'yes',
# or if ExitAfterSecondFactorAuthenticationTimeout is set to 'yes'.
#
# It controls how long (in seconds) IBC waits for login to complete
# after the user acknowledges the second factor authentication
# alert at the IBKR Mobile app. If login has not completed after
# this time, IBC terminates.
# The default value is 60.

SecondFactorAuthenticationExitInterval=${TWOFA_EXIT_INTERVAL}


# This setting specifies the timeout for second factor authentication
# imposed by IB. The value is in seconds. You should not change this
# setting unless you have reason to believe that IB has changed the
# timeout. The default value is 180.

SecondFactorAuthenticationTimeout=180


# DEPRECATED SETTING
# ------------------
#
# ExitAfterSecondFactorAuthenticationTimeout - THIS SETTING WILL BE
# REMOVED IN A FUTURE RELEASE. For IBC version 3.14.0 and later, see
# the notes for ReloginAfterSecondFactorAuthenticationTimeout above.
#
# For IBC versions earlier than 3.14.0: If you use the IBKR Mobile
# app for second factor authentication, and you fail to complete the
# process before the time limit imposed by IBKR, you can use this
# setting to tell IBC to exit: arrangements can then be made to
# automatically restart IBC in order to initiate the login sequence
# afresh. Otherwise, manual intervention at TWS's
# Second Factor Authentication dialog is needed to complete the
# login.
#
# Permitted values are 'yes' and 'no'. The default is 'no'.
#
# Note that the scripts provided with the IBC zips for Windows and
# Linux provide options to automatically restart in these
# circumstances, but only if this setting is also set to 'yes'.

ExitAfterSecondFactorAuthenticationTimeout=no


# Trading Mode
# ------------
#
# This indicates whether the live account or the paper trading
# account corresponding to the supplied credentials is to be used.
# The allowed values are 'live' (the default) and 'paper'.
#
# If this is set to 'live', then the credentials for the live
# account must be supplied. If it is set to 'paper', then either
# the live or the paper-trading credentials may be supplied.

TradingMode=${TRADING_MODE}


# Paper-trading Account Warning
# -----------------------------
#
# Logging in to a paper-trading account results in TWS displaying
# a dialog asking the user to confirm that they are aware that this
# is not a brokerage account. Until this dialog has been accepted,
# TWS will not allow API connections to succeed. Setting this
# to 'yes' (the default) will cause IBC to automatically
# confirm acceptance. Setting it to 'no' will leave the dialog
# on display, and the user will have to deal with it manually.

AcceptNonBrokerageAccountWarning=yes


# Login Dialog Display Timeout
#-----------------------------
#
# In some circumstances, starting TWS may result in failure to display
# the login dialog. Restarting TWS may help to resolve this situation,
# and IBC does this automatically.
#
# This setting controls how long (in seconds) IBC waits for the login
# dialog to appear before restarting TWS.
#
# Note that in normal circumstances with a reasonably specified
# computer the time to displaying the login dialog is typically less
# than 20 seconds, and frequently much less. However many factors can
# influence this, and it is unwise to set this value too low.
#
# The default value is 60.

LoginDialogDisplayTimeout=60



# =============================================================================
# 3.   TWS Startup Settings
# =============================================================================

# Path to settings store
# ----------------------
#
# Path to the directory where TWS should store its settings. This is
# normally the folder in which TWS is installed. However you may set
# it to some other location if you wish (for example if you want to
# run multiple instances of TWS with different settings).
#
# It is recommended for clarity that you use an absolute path. The
# effect of using a relative path is undefined.
#
# Linux and macOS users should use the appropriate path syntax.
#
# Note that, for Windows users, you MUST use double separator
# characters to separate the elements of the folder path: for
# example, IbDir=C:\\IBLiveSettings is valid, but
# IbDir=C:\IBLiveSettings is NOT valid and will give unexpected
# results. Linux and macOS users need not use double separators,
# but they are acceptable.
#
# The default is the current working directory when IBC is
# started, unless the TWS_SETTINGS_PATH setting in the relevant
# start script is set.
#
# If both this setting and TWS_SETTINGS_PATH are set, then this
# setting takes priority. Note that if they have different values,
# auto-restart will not work.
#
# NB: this setting is now DEPRECATED. You should use the
# TWS_SETTINGS_PATH setting in the relevant start script.

#IbDir=/home/ibgateway/Jts


# Store settings on server
# ------------------------
#
# If you wish to store a copy of your TWS settings on IB's
# servers as well as locally on your computer, set this to
# 'yes': this enables you to run TWS on different computers
# with the same configuration, market data lines, etc. If set
# to 'no', running TWS on different computers will not share the
# same settings. If no value is specified, TWS will obtain its
# settings from the same place as the last time this user logged
# in (whether manually or using IBC).

StoreSettingsOnServer=


# Minimize TWS on startup
# -----------------------
#
# Set to 'yes' to minimize TWS when it starts:

MinimizeMainWindow=no


# Existing Session Detected Action
# --------------------------------
#
# When a user logs on to an IBKR account for trading purposes by any means, the
# IBKR account server checks to see whether the account is already logged in
# elsewhere. If so, a dialog is displayed to both the users that enables them
# to determine what happens next. The 'ExistingSessionDetectedAction' setting
# instructs TWS how to proceed when it displays this dialog:
#
#   * If the new TWS session is set to 'secondary', the existing session continues
#     and the new session terminates. Thus a secondary TWS session can never
#     override any other session.
#
#   * If the existing TWS session is set to 'primary', the existing session
#     continues and the new session terminates (even if the new session is also
#     set to primary). Thus a primary TWS session can never be overridden by
#     any new session).
#
#   * If both the existing and the new TWS sessions are set to 'primaryoverride',
#     the existing session terminates and the new session proceeds.
#
#   * If the existing TWS session is set to 'manual', the user must handle the
#     dialog.
#
# The difference between 'primary' and 'primaryoverride' is that a
# 'primaryoverride' session can be overriden over by a new 'primary' session,
# but a 'primary' session cannot be overriden by any other session.
#
# When set to 'primary', if another TWS session is started and manually told to
# end the 'primary' session, the 'primary' session is automatically reconnected.
#
# The default is 'manual'.

ExistingSessionDetectedAction=primary


# Override TWS API Port Number
# ----------------------------
#
# If OverrideTwsApiPort is set to an integer, IBC changes the
# 'Socket port' in TWS's API configuration to that number shortly
# after startup (but note that for the FIX Gateway, this setting is
# actually stored in jts.ini rather than the Gateway's settings
# file). Leaving the setting blank will make no change to
# the current setting. This setting is only intended for use in
# certain specialized situations where the port number needs to
# be set dynamically at run-time, and for the FIX Gateway: most
# non-FIX users will never need it, so don't use it unless you know
# you need it.

OverrideTwsApiPort=


# Override TWS Master Client ID
# -----------------------------
#
# If OverrideTwsMasterClientID is set to an integer, IBC changes the
# 'Master Client ID' value in TWS's API configuration to that
# value shortly after startup. Leaving the setting blank will make
# no change to the current setting. This setting is only intended
# for use in certain specialized situations where the value needs to
# be set dynamically at run-time: most users will never need it,
# so don't use it unless you know you need it.

OverrideTwsMasterClientID=


# Read-only Login
# ---------------
#
# If ReadOnlyLogin is set to 'yes', and the user is enrolled in IB's
# account security programme, the user will not be asked to perform
# the second factor authentication action, and login to TWS will
# occur automatically in read-only mode: in this mode, placing or
# managing orders is not allowed.
#
# If set to 'no', and the user is enrolled in IB's account security
# programme, the second factor authentication process is handled
# according to the Second Factor Authentication Settings described
# elsewhere in this file.
#
# If the user is not enrolled in IB's account security programme,
# this setting is ignored. The default is 'no'.

ReadOnlyLogin=no


# Read-only API
# -------------
#
# If ReadOnlyApi is set to 'yes', API programs cannot submit, modify
# or cancel orders. If set to 'no', API programs can do these things.
# If not set, the existing TWS/Gateway configuration is unchanged.
# NB: this setting is really only supplied for the benefit of new TWS
# or Gateway instances that are being automatically installed and
# started without user intervention (eg Docker containers). Where
# a user is involved, they should use the Global Configuration to
# set the relevant checkbox (this only needs to be done once) and
# not provide a value for this setting.

ReadOnlyApi=${READ_ONLY_API}


# API Precautions
# ---------------
#
# These settings relate to the corresponding 'Precautions' checkboxes in the
# API section of the Global Configuration dialog.
#
# For all of these, the accepted values are:
# - 'yes' sets the checkbox
# - 'no' clears the checkbox
# - if not set, the existing TWS/Gateway configuration is unchanged
#
# NB: thess settings are really only supplied for the benefit of new TWS
# or Gateway instances that are being automatically installed and
# started without user intervention, or where user settings are not preserved
# between sessions (eg some Docker containers). Where a user is involved, they
# should use the Global Configuration to set the relevant checkboxes and not
# provide values for these settings.

BypassOrderPrecautions=${BYPASS_WARNING}

BypassBondWarning=${BYPASS_WARNING}

BypassNegativeYieldToWorstConfirmation=${BYPASS_WARNING}

BypassCalledBondWarning=${BYPASS_WARNING}

BypassSameActionPairTradeWarning=${BYPASS_WARNING}

BypassPriceBasedVolatilityRiskWarning=${BYPASS_WARNING}

BypassUSStocksMarketDataInSharesWarning=${BYPASS_WARNING}

BypassRedirectOrderWarning=${BYPASS_WARNING}

BypassNoOverfillProtectionPrecaution=${BYPASS_WARNING}


# Market data size for US stocks - lots or shares
# -----------------------------------------------
#
# Since IB introduced the option of market data for US stocks showing
# bid, ask and last sizes in shares rather than lots, TWS and Gateway
# display a dialog immediately after login notifying the user about
# this and requiring user input before allowing market data to be
# accessed. The user can request that the dialog not be shown again.
#
# It is recommended that the user should handle this dialog manually
# rather than using these settings, which are provided for situations
# where the user interface is not easily accessible, or where user
# settings are not preserved between sessions (eg some Docker images).
#
# - If this setting is set to 'accept', the dialog will be handled
#   automatically and the option to not show it again will be
#   selected.
#
#   Note that in this case, the only way to allow the dialog to be
#   displayed again is to manually enable the 'Bid, Ask and Last
#   Size Display Update' message in the 'Messages' section of the TWS
#   configuration dialog. So you should only use 'Accept' if you are
#   sure you really don't want the dialog to be displayed again, or
#   you have easy access to the user interface.
#
# - If set to 'defer', the dialog will be handled automatically (so
#   that market data will start), but the option to not show it again
#   will not be selected, and it will be shown again after the next
#   login.
#
# - If set to 'ignore', the user has to deal with the dialog manually.
#
# The default value is 'ignore'.
#
# Note if set to 'accept' or 'defer', TWS also automatically sets
# the API settings checkbox labelled 'Send market data in lots for
# US stocks for dual-mode API clients'. IBC cannot prevent this.
# However you can change this immmediately by setting
# SendMarketDataInLotsForUSstocks (see below) to 'no' .

AcceptBidAskLastSizeDisplayUpdateNotification=accept


# This setting determines whether the API settings checkbox labelled
# 'Send market data in lots for US stocks for dual-mode API clients'
# is set or cleared. If set to 'yes', the checkbox is set. If set to
# 'no' the checkbox is cleared. If defaulted, the checkbox is
# unchanged.

SendMarketDataInLotsForUSstocks=


# Trusted API Client IPs
# ----------------------
#
# NB: THIS SETTING IS ONLY RELEVANT FOR THE GATEWAY, AND ONLY WHEN FIX=yes.
# In all other cases it is ignored.
#
# This is a list of IP addresses separated by commas. API clients with IP
# addresses in this list are able to connect to the API without Gateway
# generating the 'Incoming connection' popup.
#
# Note that 127.0.0.1 is always permitted to connect, so do not include it
# in this setting.

TrustedTwsApiClientIPs=


# Reset Order ID Sequence
# -----------------------
#
# The setting resets the order id sequence for orders submitted via the API, so
# that the next invocation of the `NextValidId` API callback will return the
# value 1. The reset occurs when TWS starts.
#
# Note that order ids are reset for all API clients, except those that have
# outstanding (ie incomplete) orders: their order id sequence carries on as
# before.
#
# Valid values are 'yes', 'true', 'false' and 'no'. The default is 'no'.

ResetOrderIdsAtStart=


# This setting specifies IBC's action when TWS displays the dialog asking for
# confirmation of a request to reset the API order id sequence.
#
# Note that the Gateway never displays this dialog, so this setting is ignored
# for a Gateway session.
#
# Valid values consist of two strings separated by a solidus '/'. The first
# value specifies the action to take when the order id reset request resulted
# from setting ResetOrderIdsAtStart=yes. The second specifies the action to
# take when the order id reset request is a result of the user clicking the
# 'Reset API order ID sequence' button in the API configuration. Each value
# must be one of the following:
#
#    'confirm'
#        order ids will be reset
#
#    'reject'
#        order ids will not be reset
#
#    'ignore'
#        IBC will ignore the dialog. The user must take action.
#
#    The default setting is ignore/ignore

# Examples:
#
#    'confirm/reject' - confirm order id reset only if ResetOrderIdsAtStart=yes
#                       and reject any user-initiated requests
#
#    'ignore/confirm' - user must decide what to do if ResetOrderIdsAtStart=yes
#                       and confirm user-initiated requests
#
#    'reject/ignore'  - reject order id reset if  ResetOrderIdsAtStart=yes but
#                       allow user to handle user-initiated requests

ConfirmOrderIdReset=



# =============================================================================
# 4.   TWS Auto-Logoff and Auto-Restart
# =============================================================================
#
# TWS and Gateway insist on being restarted every day. Two alternative
# automatic options are offered:
#
#    - Auto-Logoff: at a specified time, TWS shuts down tidily, without
#      restarting.
#
#    - Auto-Restart: at a specified time, TWS shuts down and then restarts
#      without the user having to re-autheticate.
#
# The normal way to configure the time at which this happens is via the Lock
# and Exit section of the Configuration dialog. Once this time has been
# configured in this way, the setting persists until the user changes it again.
#
# However, there are situations where there is no user available to do this
# configuration, or where there is no persistent storage (for example some
# Docker images). In such cases, the auto-restart or auto-logoff time can be
# set whenever IBC starts with the settings below.
#
# The value, if specified, must be a time in HH:MM AM/PM format, for example
# 08:00 AM or 10:00 PM. Note that there must be a single space between the
# two parts of this value; also that midnight is "12:00 AM" and midday is
# "12:00 PM".
#
# If no value is specified for either setting, the currently configured
# settings will apply. If a value is supplied for one setting, the other
# setting is cleared. If values are supplied for both settings, only the
# auto-restart time is set, and the auto-logoff time is cleared.
#
# Note that for a normal TWS/Gateway installation with persistent storage
# (for example on a desktop computer) the value will be persisted as if the
# user had set it via the configuration dialog.
#
# If you choose to auto-restart, you should take note of the considerations
# described at the link below. Note that where this information mentions
# 'manual authentication', restarting IBC will do the job (IBKR does not
# recognise the existence of IBC in its docuemntation).
#
#  https://www.interactivebrokers.com/en/software/tws/twsguide.htm#usersguidebook/configuretws/auto_restart_info.htm
#
# If you use the "RESTART" command via the IBC command server, and IBC is
# running any version of the Gateway (or a version of TWS earlier than 1018),
# note that this will set the Auto-Restart time in Gateway/TWS's configuration
# dialog to the time at which the restart actually happens (which may be up to
# a minute after the RESTART command is issued). To prevent future auto-
# restarts at this time, you must make sure you have set AutoLogoffTime or
# AutoRestartTime to your desired value before running IBC. NB: this does not
# apply to TWS from version 1018 onwards.

AutoLogoffTime=${AUTO_LOGOFF_TIME}

AutoRestartTime=${AUTO_RESTART_TIME}


# =============================================================================
# 5.   TWS Tidy Closedown Time
# =============================================================================
#
# Specifies a time at which TWS will close down tidily, with no restart.
#
# There is little reason to use this setting. It is similar to AutoLogoffTime,
# but can include a day-of-the-week, whereas AutoLogoffTime and AutoRestartTime
# apply every day. So for example you could use ClosedownAt in conjunction with
# AutoRestartTime to shut down TWS on Friday evenings after the markets
# close, without it running on Saturday as well.
#
# To tell IBC to tidily close TWS at a specified time every
# day, set this value to <hh:mm>, for example:
# ClosedownAt=22:00
#
# To tell IBC to tidily close TWS at a specified day and time
# each week, set this value to <dayOfWeek hh:mm>, for example:
# ClosedownAt=Friday 22:00
#
# Note that the day of the week must be specified using your
# default locale. Also note that Java will only accept
# characters encoded to ISO 8859-1 (Latin-1). This means that
# if the day name in your default locale uses any non-Latin-1
# characters you need to encode them using Unicode escapes
# (see http://java.sun.com/docs/books/jls/third_edition/html/lexical.html#3.3
# for details). For example, to tidily close TWS at 12:00 on
# Saturday where the default locale is Simplified Chinese,
# use the following:
# #ClosedownAt=\u661F\u671F\u516D 12:00

ClosedownAt=



# =============================================================================
# 6.   Other TWS Settings
# =============================================================================

# Accept Incoming Connection
# --------------------------
#
# If set to 'accept', IBC automatically accepts incoming
# API connection dialogs. If set to 'reject', IBC
# automatically rejects incoming API connection dialogs. If
# set to 'manual', the user must decide whether to accept or reject
# incoming API connection dialogs. The default is 'manual'.
# NB: it is recommended to set this to 'reject', and to explicitly
# configure which IP addresses can connect to the API in TWS's API
# configuration page, as this is much more secure (in this case, no
# incoming API connection dialogs will occur for those IP addresses).

AcceptIncomingConnectionAction=reject


# Allow Blind Trading
# -------------------
#
# If you attempt to place an order for a contract for which
# you have no market data subscription, TWS displays a dialog
# to warn you against such blind trading.
#
#   yes   means the dialog is dismissed as though the user had
# 	  clicked the 'Ok' button: this means that you accept
# 	  the risk and want the order to be submitted.
#
#   no    means the dialog remains on display and must be
#         handled by the user.

AllowBlindTrading=no


# Save Settings on a Schedule
# ---------------------------
#
# You can tell TWS to automatically save its settings on a schedule
# of your choosing. You can specify one or more specific times,
# like this:
#
# SaveTwsSettingsAt=HH:MM [ HH:MM]...
#
# for example:
# SaveTwsSettingsAt=08:00   12:30 17:30
#
# Or you can specify an interval at which settings are to be saved,
# optionally starting at a specific time and continuing until another
# time, like this:
#
#SaveTwsSettingsAt=Every n [{mins | hours}] [hh:mm] [hh:mm]
#
# where the first hh:mm is the start time and the second is the end
# time. If you don't specify the end time, settings are saved regularly
# from the start time till midnight. If you don't specify the start time.
# settings are saved regularly all day, beginning at 00:00. Note that
# settings will always be saved at the end time, even if that is not
# exactly one interval later than the previous time. If neither 'mins'
# nor 'hours' is specified, 'mins' is assumed. Examples:
#
# To save every 30 minutes all day starting at 00:00
#SaveTwsSettingsAt=Every 30
#SaveTwsSettingsAt=Every 30 mins
#
# To save every hour starting at 08:00 and ending at midnight
#SaveTwsSettingsAt=Every 1 hours 08:00
#SaveTwsSettingsAt=Every 1 hours 08:00 00:00
#
# To save every 90 minutes starting at 08:00 up to and including 17:43
#SaveTwsSettingsAt=Every 90 08:00 17:43

SaveTwsSettingsAt=${SAVE_TWS_SETTINGS}


# Confirm Crypto Currency Orders Automatically
# --------------------------------------------
#
# When you place an order for a cryptocurrency contract, a dialog is displayed
# asking you to confirm that you want to place the order, and notifying you
# that you are placing an order to trade cryptocurrency with Paxos, a New York
# limited trust company, and not at Interactive Brokers.
#
#   transmit    means that the order will be placed automatically, and the
#               dialog will then be closed
#
#   cancel      means that the order will not be placed, and the dialog will
#               then be closed
#
#   manual      means that IBC will take no action and the user must deal
#               with the dialog

ConfirmCryptoCurrencyOrders=transmit



# =============================================================================
# 7.   Settings Specific to Indian Versions of TWS
# =============================================================================

# Indian versions of TWS may display a password expiry
# notification dialog and a NSE Compliance dialog. These can be
# dismissed by setting the following to yes. By default the
# password expiry notice is not dismissed, but the NSE Compliance
# notice is dismissed.

# Warning: setting DismissPasswordExpiryWarning=yes will mean
# you will not be notified when your password is about to expire.
# You must then take other measures to ensure that your password
# is changed within the expiry period, otherwise IBC will
# not be able to login successfully.

DismissPasswordExpiryWarning=no
DismissNSEComplianceNotice=yes



# =============================================================================
# 8.   IBC Command Server Settings
# =============================================================================

# Do NOT CHANGE THE FOLLOWING SETTINGS unless you
# intend to issue commands to IBC (for example
# using telnet). Note that these settings have nothing to
# do with running programs that use the TWS API.

# Command Server Port Number
# --------------------------
#
# The port number that IBC listens on for commands
# such as "STOP". DO NOT set this to the port number
# used for TWS API connections.
#
# The convention is to use 7462 for this port,
# but it must be set to a different value from any other
# IBC instance that might run at the same time.
#
# The default value is 0, which tells IBC not to start
# the command server

#CommandServerPort=7462
CommandServerPort=0


# Permitted Command Sources
# -------------------------
#
# A comma separated list of IP addresses, or host names,
# which are allowed addresses for sending commands to
# IBC.  Commands can always be sent from the
# same host as IBC is running on.

ControlFrom=


# Address for Receiving Commands
# ------------------------------
#
# Specifies the IP address on which the Command Server
# is to listen. For a multi-homed host, this can be used
# to specify that connection requests are only to be
# accepted on the specified address. The default is to
# accept connection requests on all local addresses.

BindAddress=


# Command Prompt
# --------------
#
# The specified string is output by the server when
# the connection is first opened and after the completion
# of each command. This can be useful if sending commands
# using an interactive program such as telnet. The default
# is that no prompt is output.
# For example:
#
# CommandPrompt=>

CommandPrompt=


# Suppress Command Server Info Messages
# -------------------------------------
#
# Some commands can return intermediate information about
# their progress. This setting controls whether such
# information is sent. The default is that such information
# is not sent.

SuppressInfoMessages=yes



# =============================================================================
# 9.   Diagnostic Settings
# =============================================================================
#
# IBC can log information about the structure of windows
# displayed by TWS. This information is useful when adding
# new features to IBC or when behaviour is not as expected.
#
# The logged information shows the hierarchical organisation
# of all the components of the window, and includes the
# current values of text boxes and labels.
#
# Note that this structure logging has a small performance
# impact, and depending on the settings can cause the logfile
# size to be significantly increased. It is therefore
# recommended that the LogStructureWhen setting be set to
# 'never' (the default) unless there is a specific reason
# that this information is needed.


# Scope of Structure Logging
# --------------------------
#
# The LogStructureScope setting indicates which windows are
# eligible for structure logging:
#
#    - (default value) if set to 'known', only windows that
#      IBC recognizes are eligible - these are windows that
#      IBC has some interest in monitoring, usually to take
#      some action on the user's behalf;
#
#    - if set to 'unknown', only windows that IBC does not
#      recognize are eligible. Most windows displayed by
#      TWS fall into this category;
#
#    - if set to 'untitled', only windows that IBC does not
#      recognize and that have no title are eligible. These
#      are usually message boxes or similar small windows,
#
#    - if set to 'all', then every window displayed by TWS
#      is eligible.
#

LogStructureScope=known


# When to Log Window Structure
# ----------------------------
#
# The LogStructureWhen setting specifies the circumstances
# when eligible TWS windows have their structure logged:
#
#     - if set to 'open' or 'yes' or 'true', IBC logs the
#       structure of an eligible window the first time it
#       is encountered;
#
#     - if set to 'openclose', the structure is logged every
#       time an eligible window is opened or closed;
#
#    - if set to 'activate', the structure is logged every
#      time an eligible window is made active;
#
#    - (default value) if set to 'never' or 'no' or 'false',
#      structure information is never logged.
#

LogStructureWhen=never


# DEPRECATED SETTING
# ------------------
#
# LogComponents - THIS SETTING WILL BE REMOVED IN A FUTURE
# RELEASE
#
# If LogComponents is set to any value, this is equivalent
# to setting LogStructureWhen to that same value and
# LogStructureScope to 'all': the actual values of those
# settings are ignored. The default is that the values
# of LogStructureScope and LogStructureWhen are honoured.

#LogComponents=


==== ./ib-gateway-docker/image-files/config/ibgateway/jts.ini.tmpl ====

[IBGateway]
WriteDebug=false
TrustedIPs=127.0.0.1
ApiOnly=true

[Logon]
Locale=en
TimeZone=${TIME_ZONE}
displayedproxymsg=1
UseSSL=true
s3store=true

[Communication]


==== ./ib-gateway-docker/Dockerfile.template ====

##############################################################################
# Setup Stage: install apps
#
# This is a dedicated stage so that donwload archives don't end up on
# production image and consume unnecessary space.
##############################################################################

FROM ubuntu:22.04 as setup

ENV IB_GATEWAY_VERSION=$VERSION
ENV IB_GATEWAY_RELEASE_CHANNEL=$CHANNEL
ENV IBC_VERSION=3.18.0

WORKDIR /tmp/setup

# Prepare system
RUN apt-get update -y && \
  DEBIAN_FRONTEND=noninteractive apt-get install --no-install-recommends --yes \
  curl \
  ca-certificates \
  unzip && \
  apt-get clean && \
  rm -rf /var/lib/apt/lists/* && \
# Install IB Gateway
# Use this instead of "RUN curl .." to install a local file:
#COPY ibgateway-${IB_GATEWAY_VERSION}-standalone-linux-x64.sh .
  curl -sSOL https://github.com/gnzsnz/ib-gateway-docker/releases/download/ibgateway-${IB_GATEWAY_RELEASE_CHANNEL}%40${IB_GATEWAY_VERSION}/ibgateway-${IB_GATEWAY_VERSION}-standalone-linux-x64.sh && \
  curl -sSOL https://github.com/gnzsnz/ib-gateway-docker/releases/download/ibgateway-${IB_GATEWAY_RELEASE_CHANNEL}%40${IB_GATEWAY_VERSION}/ibgateway-${IB_GATEWAY_VERSION}-standalone-linux-x64.sh.sha256 && \
  sha256sum --check ./ibgateway-${IB_GATEWAY_VERSION}-standalone-linux-x64.sh.sha256 && \
  chmod a+x ./ibgateway-${IB_GATEWAY_VERSION}-standalone-linux-x64.sh && \
  ./ibgateway-${IB_GATEWAY_VERSION}-standalone-linux-x64.sh -q -dir /root/Jts/ibgateway/${IB_GATEWAY_VERSION} &&\
  # Install IBC
  curl -sSOL https://github.com/IbcAlpha/IBC/releases/download/${IBC_VERSION}-Update.1/IBCLinux-${IBC_VERSION}.zip && \
  mkdir /root/ibc && \
  unzip ./IBCLinux-${IBC_VERSION}.zip -d /root/ibc && \
  chmod -R u+x /root/ibc/*.sh && \
  chmod -R u+x /root/ibc/scripts/*.sh

COPY ./config/ibgateway/jts.ini.tmpl /root/Jts/jts.ini.tmpl
COPY ./config/ibc/config.ini.tmpl /root/ibc/config.ini.tmpl

# Copy scripts
COPY ./scripts /root/scripts

##############################################################################
# Build Stage: build production image
##############################################################################

FROM ubuntu:22.04

ENV IB_GATEWAY_VERSION=$VERSION
# IB Gateway user constants
ARG USER_ID="${USER_ID:-1000}"
ARG USER_GID="${USER_GID:-1000}"
# IBC env vars
ENV HOME=/home/ibgateway
ENV TWS_MAJOR_VRSN=${IB_GATEWAY_VERSION}
ENV TWS_PATH=${HOME}/Jts
ENV TWS_INI=jts.ini
ENV TWS_INI_TMPL=${TWS_INI}.tmpl
ENV IBC_PATH=${HOME}/ibc
ENV IBC_INI=${HOME}/ibc/config.ini
ENV IBC_INI_TMPL=${IBC_INI}.tmpl
ENV SCRIPT_PATH=${HOME}/scripts
ENV GATEWAY_OR_TWS=gateway
# Copy files
COPY --from=setup /usr/local/i4j_jres/ /usr/local/i4j_jres
COPY --chown=${USER_ID}:${USER_GID} --from=setup /root/ ${HOME}

# Prepare system
RUN apt-get update -y && \
  apt-get upgrade -y && \
  DEBIAN_FRONTEND=noninteractive apt-get install --no-install-recommends --yes \
  gettext-base socat xvfb x11vnc sshpass openssh-client && \
  apt-get clean && \
  rm -rf /var/lib/apt/lists/* && \
  groupadd --gid ${USER_GID} ibgateway && \
  useradd -ms /bin/bash --uid ${USER_ID} --gid ${USER_GID} ibgateway && \
  chmod a+x ${SCRIPT_PATH}/*.sh

USER ${USER_ID}:${USER_GID}
WORKDIR ${HOME}

# Start run script
CMD ["/home/ibgateway/scripts/run.sh"]

LABEL org.opencontainers.image.source=https://github.com/gnzsnz/ib-gateway-docker
LABEL org.opencontainers.image.url=https://github.com/gnzsnz/ib-gateway-docker/pkgs/container/ib-gateway
LABEL org.opencontainers.image.description="Docker image with IB Gateway and IBC "
LABEL org.opencontainers.image.licenses="Apache License Version 2.0"
LABEL org.opencontainers.image.version=${IB_GATEWAY_VERSION}-${IB_GATEWAY_RELEASE_CHANNEL}


