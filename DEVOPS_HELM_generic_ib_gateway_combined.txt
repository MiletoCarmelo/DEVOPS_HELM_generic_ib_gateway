==== ./script-manager.sh ====

#!/bin/bash

# Vérifie si un argument (répertoire source) est fourni
if [ $# -ne 1 ]; then
    echo "Usage: $0 <directory>"
    exit 1
fi

SOURCE_DIR="$1"

# Obtient le nom du dossier parent (enlève le chemin complet)
DIR_NAME=$(basename "$(realpath "$SOURCE_DIR")")
OUTPUT_FILE="${DIR_NAME}_combined.txt"

# Vérifie si le répertoire existe
if [ ! -d "$SOURCE_DIR" ]; then
    echo "Le répertoire '$SOURCE_DIR' n'existe pas"
    exit 1
fi

# Supprime le fichier de sortie s'il existe déjà
[ -f "$OUTPUT_FILE" ] && rm "$OUTPUT_FILE"

# Trouve tous les fichiers yaml, yml et _tpl et les traite
find "$SOURCE_DIR" \( -name "*.yaml" -o -name "*.yml" -o -name "*_tpl" -o -name "*.sh"  -o -name "Dockerfile*" -o -name "*.conf" \) | while read -r file; do
    # Vérifie si le fichier est lisible
    if [ -r "$file" ]; then
        # Ajoute le séparateur avec le nom du fichier
        echo "==== $file ====" >> "$OUTPUT_FILE"
        # Ajoute une ligne vide pour la lisibilité
        echo "" >> "$OUTPUT_FILE"
        # Ajoute le contenu du fichier
        cat "$file" >> "$OUTPUT_FILE"
        # Ajoute deux lignes vides après chaque fichier
        echo "" >> "$OUTPUT_FILE"
        echo "" >> "$OUTPUT_FILE"
    fi
done

echo "Les fichiers YAML et TPL ont été combinés dans $OUTPUT_FILE"

==== ./values.yaml ====

# values.yaml
image:
  repository: ghcr.io/gnzsnz/ib-gateway
  tag: "stable"
  pullPolicy: IfNotPresent

nameOverride: ""
fullnameOverride: ""

serviceAccount:
  create: true
  name: ""
  annotations: {}

service:
  type: ClusterIP
  annotations: {}

persistence:
  enabled: false
  accessMode: ReadWriteOnce
  storageClass: standard
  size: 10Gi

# Configuration du namespace
namespace:
  name: "ib-gateway"

ingress:
  enabled: true

# Configuration des secrets
secret:
  name: "ib-gateway-secrets"

# Configuration IB Gateway
ibgateway:
  mode: "paper"
  port: "4001"
  apiPort: "4002"
  timezone: "Europe/Paris"

probes:
  liveness:
    enabled: false
    initialDelaySeconds: 5
    periodSeconds: 5
  readiness:
    enabled: false
    initialDelaySeconds: 5
    periodSeconds: 5

logging:
  level: debug

security:
  autoRestartOnDisconnect: true

# Configuration NoVNC
novnc:
  enabled: true
  image:
    repository: theasp/novnc
    tag: latest
    pullPolicy: IfNotPresent
  service:
    type: ClusterIP
    port: 6080
  display:
    width: "1280"
    height: "720"

# Configuration VNC
vnc:
  enabled: true
  port: "5900"
  password: "myVNCpass"

==== ./Chart.yaml ====

# Chart.yaml
apiVersion: v2
name: generic-ib-gateway-backend
description: A Helm chart for deploying Interactive Brokers Gateway on Kubernetes
type: application
version: 0.1.0
appVersion: "1.0.0"

==== ./scripts/novnc-start.sh ====

#!/bin/bash

/opt/novnc/utils/novnc_proxy --vnc ${VNC_HOST}:${VNC_PORT} --listen ${PORT:-6080}

==== ./scripts/creer_secret_ib.sh ====

#!/bin/bash

# Couleurs et styles
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color
BOLD='\033[1m'

# Variables
NAMESPACE="trading"
SECRET_NAME="ib-gateway-secrets" # Doit correspondre à .Values.secret.name dans values.yaml
ENV_FILE=".env"

# Fonction pour afficher les messages
log() {
    local level=$1
    local message=$2
    case $level in
        "info")
            echo -e "${BLUE}ℹ️ ${message}${NC}"
            ;;
        "success")
            echo -e "${GREEN}✅ ${message}${NC}"
            ;;
        "error")
            echo -e "${RED}❌ ${message}${NC}"
            ;;
        "warning")
            echo -e "${YELLOW}⚠️ ${message}${NC}"
            ;;
    esac
}

# Vérification de l'existence du fichier .env
if [ ! -f "$ENV_FILE" ]; then
    log "error" "Le fichier $ENV_FILE n'existe pas"
    echo "Créez un fichier $ENV_FILE avec les variables suivantes:"
    echo "TWS_USERID=votre_username"
    echo "TWS_PASSWORD=votre_password"
    echo "IB_ACCOUNT=votre_compte"
    exit 1
fi

# Vérification de kubectl
if ! command -v kubectl &> /dev/null; then
    log "error" "kubectl n'est pas installé"
    exit 1
fi

# Lecture des variables sensibles depuis le fichier .env
log "info" "Lecture des variables depuis $ENV_FILE..."
TWS_USERID=$(grep TWS_USERID "$ENV_FILE" | cut -d '=' -f2- | tr -d '"' | tr -d "'" | xargs)
TWS_PASSWORD=$(grep TWS_PASSWORD "$ENV_FILE" | cut -d '=' -f2- | tr -d '"' | tr -d "'" | xargs)
IB_ACCOUNT=$(grep IB_ACCOUNT "$ENV_FILE" | cut -d '=' -f2- | tr -d '"' | tr -d "'" | xargs)

# Vérification des variables requises
missing_vars=()
[ -z "$TWS_USERID" ] && missing_vars+=("TWS_USERID")
[ -z "$TWS_PASSWORD" ] && missing_vars+=("TWS_PASSWORD")
[ -z "$IB_ACCOUNT" ] && missing_vars+=("IB_ACCOUNT")

if [ ${#missing_vars[@]} -ne 0 ]; then
    log "error" "Variables manquantes dans $ENV_FILE:"
    for var in "${missing_vars[@]}"; do
        echo "- $var"
    done
    exit 1
fi

# Vérification de la connexion au cluster
log "info" "Vérification de la connexion au cluster Kubernetes..."
if ! kubectl cluster-info &> /dev/null; then
    log "error" "Impossible de se connecter au cluster Kubernetes"
    exit 1
fi

# Création du namespace s'il n'existe pas
log "info" "Création du namespace ${NAMESPACE}..."
if kubectl create namespace "${NAMESPACE}" --dry-run=client -o yaml | kubectl apply -f - ; then
    log "success" "Namespace ${NAMESPACE} prêt"
else
    log "error" "Erreur lors de la création du namespace"
    exit 1
fi

# Création du secret pour IB Gateway
log "info" "Création du secret ${SECRET_NAME}..."
if kubectl create secret generic "${SECRET_NAME}" \
    -n "${NAMESPACE}" \
    --from-literal=username="${TWS_USERID}" \
    --from-literal=password="${TWS_PASSWORD}" \
    --from-literal=account="${IB_ACCOUNT}" \
    --dry-run=client -o yaml | kubectl apply -f - ; then
    log "success" "Secret ${SECRET_NAME} créé avec succès"
else
    log "error" "Erreur lors de la création du secret"
    exit 1
fi

# Vérification du secret
log "info" "Vérification du secret..."
if kubectl get secret "${SECRET_NAME}" -n "${NAMESPACE}" &> /dev/null; then
    log "success" "Le secret ${SECRET_NAME} existe dans le namespace ${NAMESPACE}"
else
    log "error" "Le secret ${SECRET_NAME} n'a pas été créé correctement"
    exit 1
fi

# Affichage du résumé
echo -e "\n${BOLD}Résumé de l'installation :${NC}"
echo -e "Namespace: ${BLUE}${NAMESPACE}${NC}"
echo -e "Secret: ${BLUE}${SECRET_NAME}${NC}"
echo -e "Username configuré: ${BLUE}${TWS_USERID}${NC}"
echo -e "Compte IB configuré: ${BLUE}${IB_ACCOUNT}${NC}"

log "success" "Configuration terminée avec succès !"

==== ./.github/workflows/ci.yml ====

name: CI

on:
  push:
    branches:
      - main

env:
  BRANCH_PAGES: github-pages
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/ib-gateway

permissions:
  contents: write
  packages: write

jobs:
  build-and-push-image:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: 'false'  # Cette option garantit que les submodules sont clonés

      - name: Checkout to aarch64 branch
        run: |
          git clone https://github.com/gnzsnz/ib-gateway-docker.git 
          cd ib-gateway-docker
          git checkout aarch64  # Checkout to the aarch64 branch
          cd ..

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: 'linux/amd64,linux/arm64'

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: 'linux/amd64,linux/arm64'

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set lowercase IMAGE_NAME
        id: set_image_name
        run: |
          echo "IMAGE_NAME_LOWER=$(echo '${{ env.IMAGE_NAME }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Set up Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.10.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version

      - name: Check ls  and pwd 
        run: |
          sudo ls -la 
          sudo pwd
    
      - name: Build and push with Docker Compose
        run: |
          docker-compose -f docker-compose.yaml build  # Build the services defined in the docker-compose file
          docker-compose -f docker-compose.yaml push   # Push the built images to the registry

      # Optionally, you can also add an additional step to clean up or prune images if needed:
      - name: Cleanup Docker images
        run: |
          docker system prune -f --all --volumes


  release-chart:
    # needs: build-and-push-image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout main branch
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Update values.yaml with new image
        run: |
          sed -i "s|repository:.*|repository: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}|" ./values.yaml
          sed -i "s|tag:.*|tag: latest|" ./values.yaml

      - name: Publish Helm chart
        uses: stefanprodan/helm-gh-pages@master
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          charts_dir: ..
          branch: ${{ env.BRANCH_PAGES }}
          charts_url: https://raw.githubusercontent.com/${{ github.repository }}/${{ env.BRANCH_PAGES }}
          linting: false

      - name: Summary
        run: |
          echo "Chart URL: https://raw.githubusercontent.com/${{ github.repository }}/${{ env.BRANCH_PAGES }}"
          echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}:latest"

==== ./.github/workflows/repo-initialization.yml ====

name: Repository initialization

on:
  repository_dispatch:
    types: [initialize]
    
  workflow_dispatch:

env:
  REPO_NAME: ${{ github.event.repository.name }}

jobs:
  create-branches:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout main branch
      uses: actions/checkout@v2
      with:
        ref: main

    - name: Create release/uat branch
      if:  ${{startsWith(env.REPO_NAME, 'DEVOPS_') || startsWith(env.REPO_NAME, 'INF_') || startsWith(env.REPO_NAME, 'DEV_')}}
      uses: peterjgrainger/action-create-branch@v2.4.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        branch: refs/heads/release/uat

    - name: Create release/prod branch
      if:  ${{startsWith(env.REPO_NAME, 'DEVOPS_') || startsWith(env.REPO_NAME, 'INF_') || startsWith(env.REPO_NAME, 'DEV_')}}
      uses: peterjgrainger/action-create-branch@v2.4.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        branch: refs/heads/release/prod

    - name: Create github-pages branch
      if: ${{startsWith(env.REPO_NAME, 'DEVOPS_HELM_')}}
      uses: peterjgrainger/action-create-branch@v2.4.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        branch: github-pages

    - name: Create DEV branch
      if: ${{startsWith(env.REPO_NAME, 'QUA_')}}
      uses: peterjgrainger/action-create-branch@v2.4.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        branch: DEV

    - name: Create prod branch
      if: ${{startsWith(env.REPO_NAME, 'QUA_')}}
      uses: peterjgrainger/action-create-branch@v2.4.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        branch: prod


==== ./templates/configmap.yaml ====

# templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "ib-gateway.fullname" . }}-config
  labels:
    {{- include "ib-gateway.labels" . | nindent 4 }}
data:
  TWS_PORT: "{{ .Values.ibgateway.port }}"
  API_PORT: "{{ .Values.ibgateway.apiPort }}"
  TRADING_MODE: "{{ .Values.ibgateway.mode }}"
  TZ: "{{ .Values.ibgateway.timezone }}"
  LOG_LEVEL: "{{ .Values.logging.level }}"
  {{- if .Values.security.autoRestartOnDisconnect }}
  IBC_AUTO_RESTART_ON_DISCONNECT: "yes"
  {{- end }}
  {{- if .Values.vnc.enabled }}
  VNC_SERVER_PASSWORD: "{{ .Values.vnc.password }}"
  {{- end }}

==== ./templates/service.yaml ====

# templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: {{ include "ib-gateway.fullname" . }}
  labels:
    {{- include "ib-gateway.labels" . | nindent 4 }}
  {{- with .Values.service.annotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}
spec:
  type: {{ .Values.service.type }}
  ports:
    - port: {{ .Values.ibgateway.apiPort | int }}
      targetPort: api
      protocol: TCP
      name: api
    - port: {{ .Values.ibgateway.port | int }}
      targetPort: tws
      protocol: TCP
      name: tws
    {{- if .Values.vnc.enabled }}
    - port: {{ .Values.vnc.port | int }}
      targetPort: vnc
      protocol: TCP
      name: vnc
    {{- end }}
  selector:
    {{- include "ib-gateway.selectorLabels" . | nindent 4 }}


==== ./templates/deployment.yaml ====

# templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "ib-gateway.fullname" . }}
  namespace: {{ .Values.namespace.name }}
  labels:
    {{- include "ib-gateway.labels" . | nindent 4 }}
spec:
  replicas: 1
  selector:
    matchLabels:
      {{- include "ib-gateway.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "ib-gateway.selectorLabels" . | nindent 8 }}
    spec:
      serviceAccountName: {{ include "ib-gateway.serviceAccountName" . }}
      containers:
        - name: ib-gateway
          image: {{ include "ib-gateway.image" . }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: tws
              containerPort: {{ .Values.ibgateway.port | int }}
              protocol: TCP
            - name: api
              containerPort: {{ .Values.ibgateway.apiPort | int }}
              protocol: TCP
            {{- if .Values.vnc.enabled }}
            - name: vnc
              containerPort: {{ .Values.vnc.port | int }}
              protocol: TCP
            {{- end }}
          env:
            - name: TWS_USERID
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.secret.name }}
                  key: username
            - name: TWS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.secret.name }}
                  key: password
            - name: trading_MODE
              value: {{ .Values.ibgateway.mode | quote }}
            - name: TZ
              value: {{ .Values.ibgateway.timezone | quote }}
          envFrom:
            - configMapRef:
                name: {{ include "ib-gateway.fullname" . }}-config
          {{- if .Values.probes.readiness.enabled }}
          readinessProbe:
            tcpSocket:
              port: api
            initialDelaySeconds: {{ .Values.probes.readiness.initialDelaySeconds }}
            periodSeconds: {{ .Values.probes.readiness.periodSeconds }}
          {{- end }}
          {{- if .Values.probes.liveness.enabled }}
          livenessProbe:
            tcpSocket:
              port: api
            initialDelaySeconds: {{ .Values.probes.liveness.initialDelaySeconds }}
            periodSeconds: {{ .Values.probes.liveness.periodSeconds }}
          {{- end }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          {{- if .Values.persistence.enabled }}
          volumeMounts:
            - name: data
              mountPath: /root/Jts
              subPath: config
            - name: data
              mountPath: /root/IBController/Logs
              subPath: logs
          {{- end }}
      {{- if .Values.persistence.enabled }}
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: {{ include "ib-gateway.fullname" . }}-pvc
      {{- end }}


==== ./templates/novnc.yaml ====

# templates/novnc.yaml
{{- if .Values.novnc.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "ib-gateway.fullname" . }}-novnc
  labels:
    {{- include "ib-gateway.labels" . | nindent 4 }}
    app.kubernetes.io/component: novnc
spec:
  replicas: 1
  selector:
    matchLabels:
      {{- include "ib-gateway.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: novnc
  template:
    metadata:
      labels:
        {{- include "ib-gateway.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: novnc
    spec:
      containers:
        - name: novnc
          image: {{ .Values.novnc.image.repository }}:{{ .Values.novnc.image.tag }}
          imagePullPolicy: {{ .Values.novnc.image.pullPolicy }}
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          env:
            - name: DISPLAY_WIDTH
              value: "{{ .Values.novnc.display.width }}"
            - name: DISPLAY_HEIGHT
              value: "{{ .Values.novnc.display.height }}"
            - name: RUN_XTERM
              value: "no"
            - name: RUN_FLUXBOX
              value: "no"
            - name: VNC_PORT
              value: "{{ .Values.vnc.port }}"
            - name: VNC_HOST
              value: {{ include "ib-gateway.fullname" . }}
            - name: VNC_PASSWORD
              valueFrom:
                configMapKeyRef:
                  name: {{ include "ib-gateway.fullname" . }}-config
                  key: VNC_SERVER_PASSWORD
---
apiVersion: v1
kind: Service
metadata:
  name: {{ include "ib-gateway.fullname" . }}-novnc
  labels:
    {{- include "ib-gateway.labels" . | nindent 4 }}
    app.kubernetes.io/component: novnc
spec:
  type: {{ .Values.novnc.service.type }}
  ports:
    - port: {{ .Values.novnc.service.port }}
      targetPort: http
      protocol: TCP
      name: http
  selector:
    {{- include "ib-gateway.selectorLabels" . | nindent 4 }}
    app.kubernetes.io/component: novnc
{{- end }}

==== ./templates/pvc.yaml ====

# templates/pvc.yaml
{{- if .Values.persistence.enabled }}
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: {{ include "ib-gateway.fullname" . }}-pvc
  labels:
    {{- include "ib-gateway.labels" . | nindent 4 }}
spec:
  accessModes:
    - {{ .Values.persistence.accessMode }}
  storageClassName: {{ .Values.persistence.storageClass }}
  resources:
    requests:
      storage: {{ .Values.persistence.size }}
{{- end }}

==== ./templates/ingress.yaml ====

# templates/ingress.yaml (optionnel, à ajouter si nécessaire)
{{- if .Values.ingress.enabled }}
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: {{ include "ib-gateway.fullname" . }}
  labels:
    {{- include "ib-gateway.labels" . | nindent 4 }}
  {{- with .Values.ingress.annotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}
spec:
  {{- if .Values.ingress.className }}
  ingressClassName: {{ .Values.ingress.className }}
  {{- end }}
  rules:
    {{- range .Values.ingress.hosts }}
    - host: {{ .host | quote }}
      http:
        paths:
          {{- range .paths }}
          - path: {{ .path }}
            pathType: {{ .pathType }}
            backend:
              service:
                name: {{ include "ib-gateway.fullname" $ }}
                port:
                  number: {{ .port }}
          {{- end }}
    {{- end }}
{{- end }}

==== ./docker-compose.yaml ====

name: algo-trader
services:
  ib-gateway:
    restart: always
    build:
      context: ./ib-gateway-docker/stable
      dockerfile: Dockerfile
    environment:
      TWS_USERID: ${TWS_USERID}
      TWS_PASSWORD: ${TWS_PASSWORD}
      TRADING_MODE: ${TRADING_MODE:-paper}
      TIME_ZONE: ${TIME_ZONE:-Europe/Paris}
      TZ: ${TIME_ZONE:-Europe/Paris}
      VNC_SERVER_PASSWORD: ${VNC_SERVER_PASSWORD}
      JAVA_HEAP_SIZE: 1024
    ports:
      - "100.64.102.47:4001:4003"
      - "100.64.102.47:4002:4004"
      - "100.64.102.47:5900:5900"
    networks:
      - ib-network

  novnc:
    build:
      context: .
      dockerfile: novnc.Dockerfile
    environment:
      - DISPLAY_WIDTH=1280
      - DISPLAY_HEIGHT=720
      - VNC_PORT=5900
      - VNC_HOST=ib-gateway
      - VNC_PASSWORD=${VNC_SERVER_PASSWORD}
    ports:
      - "100.64.102.47:6080:6080"
    depends_on:
      - ib-gateway
    networks:
      - ib-network

networks:
  ib-network:
    driver: bridge

